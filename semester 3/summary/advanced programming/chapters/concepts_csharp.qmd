## Collections

### Queue

Repräsentiert eine first-in, first-out Collection von Objekten. Gut geeigent für temporären Speicher von Informationen. Drei grundlegende Operationen können auf einer `Queue<T>` und ihren Elementen ausgeführt werden:
- Enqueue, fügt einer `Queue<T>` ein Element hinzu
- Dequeue, entfernt das älteste Element vom Start einer `Queue<T>`
- Peek, gibt das älteste Element vom Start einer `Queue<T>` zurück, ohne es zu entfernen

```csharp
Queue<string> numbers = new Queue<string>();
  numbers.Enqueue("one");
  numbers.Enqueue("two");
  numbers.Enqueue("three");

  Console.WriteLine("\nDequeuing '{0}'",
    numbers.Dequeue());
  Console.WriteLine("Peek next item: {0}",
    numbers.Peek());
  Console.WriteLine("Dequeuing '{0}'",
    numbers.Dequeue());
```
### Linked List

Repräsentiert eine doppelt gelinkte universelle Liste. `LinkedList<T>` beinhaltet Nodes vom Typ `LinkedListNode<T>` und ermöglicht es, an erster und letzter Stelle der Liste Elemente hinzuzufügen. Die Klasse beinhaltet folgende Funktionen:
- AddBefore(LinkedListNode<T>, T), fügt einen neuen Node vor dem mitgegebenen Node ein.
- AddAfter(LinkedListNode<T>, T), fügt einen neuen Node nach dem mitgegebenen Node ein.
- AddFirst(T)
- AddLast(T)
- Find(T), findet den ersten Node, der den angegebenen Value beinhaltet.
- Remove(T), entfernt den ersten Node, der den angegebenen Value beinhaltet.
- RemoveFirst()
- RemoveLast()

```csharp
string[] words =
  { "the", "fox", "jumps", "over", "the", "dog" };
LinkedList<string> sentence =
  new LinkedList<string>(words);

// Add  word 'today' to beginning of the list.
sentence.AddFirst("today");
sentence.AddFirst("today");

// Move the first node to be the last node.
LinkedListNode<string> mark1 = sentence.First;
sentence.RemoveFirst();
sentence.AddLast(mark1);
```

### Dictionary

Repräsentiert eine Collection von Key-Value-Paaren. Eine `KeyNotFoundException` wird erzeugt, wenn ein verlangter Key nicht vorhanden ist. Zu Keys zugehörige Values können ersetzt werden. Key Value Paare sind einzigartig. Ein Key kann nicht null sein, ein Value aber schon. Die `TryGetValue` Methode kann verwendet werden, wenn das Programm oft nach Key Values suchen muss, die nicht im `Dictionary<TKey,TValue>` vorhanden sind. Mit `ContainsKey` kann überprüft werden, ob ein Key bereits existiert.

- Add(TKey, TValue), fügt ein Value mit dazugehörigem Key ein.
- Clear(), entfernt alle Elemente der SortedList.
- Remove(TKey), entfernt das entsprechende Element mit diesem Key.
- TryGetValue(TKey, TValue), gibt den mit dem key verbundene Value zurück.

Adds the specified key and value to the dictionary.

```csharp
// Create a new dictionary of strings.
Dictionary<string, string> openWith =
  new Dictionary<string, string>();

// Add some elements to the dictionary.
openWith.Add("txt", "notepad.exe");
openWith.Add("bmp", "paint.exe");

// Setting the indexer for a key
// adds a new key/value pair.
openWith["doc"] = "winword.exe";
```
### Sorted List

Eine `SortedList<TKey, TValue>` ist eine Collection mit Key/Value Paaren, welche nach den Werten der Keys geordnet ist. Die Sortierung erfolgt mit der `IComparer<T>` Collection. Sowohl Keys wie auch Values haben einen Generischen Wertetyp. Dabei kann ein Key nur einmal vorkommen, um keine Verwechslungen zu ermöglichen. Eine `SortedList<TKey, TValue>` funktioniert in dieser Hinsicht gleich wie ein `SortedDictionary<TKey, TValue>`, braucht aber weniger Speicher und ist langsamer beim Hinzufügen und Entfernen von unsortierten Daten. Beim Erzeugen einer Liste mit sortierten Daten ist die `SortedList<TKey, TValue>` schneller als `SortedDictionary<TKey, TValue>`.

- Add(TKey, TValue), fügt ein Value mit dazugehörigem Key ein.
- Clear(), entfernt alle Elemente der SortedList.
- IndexOfKey(TKey), sucht den entsprechenden Key und gibt dessen Index aus.
- IndexOfValue(TValue), sucht die entsprechende Value und gibt deren Index aus.
- Remove(TKey), entfernt das entsprechende Element mit diesem Key.
- RemoveAt(Int32), entfernt das Element mit diesem Index.
- TryGetValue(TKey, TValue), vergleicht ob Eingabe schon vorhanden ist.


### Indexer

Indexer ermöglichen die Indexierung von Klassen oder Structs und damit den Zugriff auf Instanzen einer Klasse .Der Indexer wird mit dem `this` Keyword definiert. Indexer müssen nicht durch einen Integer-Wert indexiert werden und können überladen werden. Mehrere Parameter können verwendet werden, um beispielsweise auf ein zweidimensionales Array zuzugreifen.

```csharp
class Collection<T> {
  private T[] arr = new T[100];
  public T this[int i] {
    get => arr[i];
    set => arr[i] = value;
  }
}

class Program {
  static void Main() {
    var strCollection = new Collection<string>();
    strCollection[0] = "Hello, World!";
    Console.WriteLine(strCollection[0]);
  }
}
// output: Hello, World!
```

### Generics

Mit dem generischen Typenparameter `T` können Klassen oder Methoden deklariert werden, bei welchen der Datentyp erst bei dier Instanziierung festgelegt wird. Wenn eine Klasse mit einem kontreten Typen instanziiert wird, wird `T` mit dem Typen ersetzt. Generics sind Typensicher.

```csharp
public class GenList<T> {
  public void Add(T input) { }
}

class TestGenericList {
  private class Class { }
  static void Main() {
    // Declare a list of type int.
    GenList<int> list1 = new GenList<int>();
    list1.Add(1);

    // Declare a list of type ExampleClass.
    GenList<Class> list2 = new GenList<Class>();
    list2.Add(new Class());
  }
}
```

## Scope / Geltungsbereich

Der Teil des Programms, in dem auf eine bestimmte Variable zugegriffen werden kann, wird als der Geltungsbereich oder *Scope* dieser Variable bezeichnet. Schlüsselwörter, wie `namespace` (siehe Kapitel @sec-namespace), `class` und andere, passen den Geltungsbereich an.

::: {.callout-important}

Die lokalste Variable wird immer bevorzugt. Im folgenden Beispiel wird bei `price = price`{.csharp} der Methodenparameter `price` anstatt die Membervariable `price` bevorzugt.

```csharp
public class Car {
  private int price;
  public void SetPrice(int price) {
    price = price;
  }
}
```
:::

### Class Level (Membervariablen) {.unnumbered .unlisted}

- Variablen in der Klasse, aber ausserhalb von Methoden, können von jeder nicht-`static`-Methode zugegriffen werden.
- `static` Variablen können diese von jeder (inklusive `static`) Methoden verwendet werden.
- Auf Membervariablen kann auch außerhalb der Klasse zugegriffen werden, indem die Zugriffsmodifikatoren (@sec-modifier) verwendet werden.
- Zugriffsmodifikatoren der Variablen haben keinen Einfluss auf den Scope in der Klasse. 

**Methoden Level**

### Methoden Level (lokale Variablen) {.unnumbered .unlisted}

In Methoden deklarierte Variablen...

- ...haben ihren Scope [nur]{.underline} auf [Methodenebene]{.underline}
- ...sind in verschachtelten Codeblöcken innerhalb einer Methode zugreifbar.
- ...existieren nicht mehr, nachdem die Ausführung der Methode beendet ist.
- Wenn diese Variablen zweimal mit demselben Namen im selben Scope deklariert werden, kommt es zu einem Kompilierungsfehler.

### Block Level (Schleifen-/Anweisungsvariablen) {.unnumbered .unlisted}

Schleifen-/Anweisungsvariablen Variablen...

- ...werden innerhalb der for-, if-, while-Anweisung usw. deklariert.
- ...werden so bezeichnet, da ihr Scope nur in der Anweisung, in der sie deklariert wurden, begrenzt ist.
- Variablen, die außerhalb der Schleife deklariert wurden, sind auch innerhalb der verschachtelten Schleifen zugänglich.
- Eine Variable, die innerhalb eines Schleifenkörpers deklariert ist, ist außerhalb des Schleifenkörpers nicht sichtbar.

```csharp
int a = 0;
if(a == 0) {
  int b = 3;
  a++;
  
  if(b == 3 && a == 1) { int c = a + b; }
  c = 4; // Compile Error -> outside of scope
}
```

## Overloading

::: callout-important
Overloading-Signaturen müssen sich in den **Datentypen** unterscheiden. Unterschiedliche Variablen-Namen führen zu einem *Compiler-Error*. 
:::

### Konstruktor Overloading

Je nach Signatur können andere Konstruktoren aufgerufen werden. Dies nennt man auch *Overloading*. In folgendem Beispiel kann ein `Point` Objekt auch ohne Position erstellt werden. Zur Signatur gehören der Methodennamen und die Anzahl, Typen und Reihenfolge der Parameter.

```csharp
class Point {
  private int pos_x;
  private int pos_y;

  public Point(int x, int y) {
    this.pos_x = x;
    this.pos_y = y;
  }

  public Point() { }
}
```

#### Konstruktor Aufruf-Reihenfolge

Mit `this` nach dem Konstruktor (unterteilt mit `:`) kann der Aufruf auf einen anderen Konstruktor weitergereicht werden.

```csharp
using System;

class Point {
  private int x;
  private int y;

  public Point(int x, int y) {
    this.x = x;
    this.y = y;
    Console.WriteLine($"Point {this.x},{this.y}");
  }

  public Point(int x) : this(x, 0) {
    Console.WriteLine("x-only");
  }

  // Two identical signatures -> ERROR
  public Point(int y) : this(y, 0) {
    Console.WriteLine("y-only");
  }

  public Point() : this(0,0) {}
  Console.WriteLine("no value");
}
```

`\vspace{3mm}`{=latex}

::: {.callout-note}

##### Schlüsselwort `this`

`this` wird nur in Methoden des eigenen Objektes verwendet, um in einer Methode der eigenen Klasse eine Membervariable oder Methoden von sich selbst (also dem Objekt) anzuwenden. Das Schlüsselwort [kann weggelassen]{.underline} werden, wenn es [keine andere Variablen mit dem gleichen Namen]{.underline} in der Methode existieren (z.B. von einem Parameter).
:::

Wird nun `Point(4)` aufgerufen, werden die Parameter auf die unterste Ebene durchgereicht und die Konstruktoren werden in umgekehrter Aufrufreihenfolge abgearbeitet. So erhält man folgendes auf der Konsole

```output
Point 4,0
x-only
```

### Methoden Overloading

Je nach Signatur können andere Methoden aufgerufen werden. Dies nennt man auch *Overloading*. In folgendem können Flächen mit unterschiedlichen Angaben gerechnet werden.

```csharp
public int Area(int width, int height) {
  return width * height;
}

public int Area(int squareSide) {
  return squareSide^2;
}

public int Area(Point a, Point b) {
  return (a.x - b.x) * (a.y - b.y);
}
```

## Default Parameter

Für Default-Werte können Konstruktoren implizit Überladen werden.

```csharp
public void Draw(bool inColor = true) { ... }

// initialize drawing object
Draw inColor = new Draw();    // inColor = true
Draw bw = new Draw(false);    // inColor = false
```

## Garbage-Collector `GC`

Objekte werden im dynamischen Heap-Speicher erstellt. Es ist daher wichtig, dass der Speicher von nicht mehr verwendeten Objekten freigegeben wird, damit kein *Memory Leak* entsteht.

In der common language runtime (CLR), dient der Garbage Collector (GC) als **automatischer Speichermanager**. Der GC verwaltet die Zuweisung und Freigabe von Speicher für eine Applikation. Ebenfalls regelt dieser die Speichersicherheit, damit Variablen nicht über ihren eigenen Speicher greifen können.

- Jeder Prozess hat einen eigenen *virtuellen* Speicher, welcher als Gateway zum physikalischen dient.
- Es kann nicht auf den physikalischen Speicher direkt zugegriffen werden, nur über den virtuellen.
- Virtuelle Speicher kann sich fragmentieren (Speicherblöcke oder auch Löcher genannt).
- Bei Speicheranfrage sucht der *virtuelle* Speichermanager nach Platz für einen **ganzen** Speicherblock (kann nicht aufgeteilt werden).
- Der [virtuelle Speicher]{.underline} besitzt drei Zuständen:

```{=latex}
\begin{center}
  \begin{tabularx}{\linewidth}{|lX|}
  \hline
  \texttt{Free}      & Speicherblock ist frei und kann reserviert werden.                           \\ \hline
  \texttt{Reserved}  & Speicherblock ist reserviert, aber kann noch nicht beschrieben werden.       \\ \hline
  \texttt{Committed} & Speicherblock wurde physikalischem Speicher zugewiesen und ist beschreibbar. \\ \hline
  \end{tabularx}
\end{center}
```

Pro initalisierten Prozess, wird je eine Speicherregion reserviert, welcher *managed Memory* genannt wird und ein Zeiger besitzt, welcher immer auf die nächst freie Speicherstelle zeigt. Dieser Speicher ist schneller als the *unmanaged Memory*.

::: {.callout-important}
1. Das Garbage Collecting wird gemacht oder regelmässiger gemacht, wenn...

- ...ein Threshold im managed Memory erreicht wurde
- ...das System wenig Speicherplatz hat.
- ...`GC.Collect` von `System` ausgeführt wurde.

2. Grosse Objekte werden in einen separaten Heap-Speicher abgelegt.
:::

### GC Generationen

Der GC-Algorithmus arbeitet mit Generationen und nach jeder GC-Sequenz wird der *überlebte* Speicher auf die nächste Generation *promoted* (bis auf die höchste Generation 2).

```{=tex}
\begin{center}
  \begin{tabularx}{\linewidth}{|cX|}
  \hline
  \textbf{Generation} & \textbf{Bedeutung} \\ \hline
  \texttt{0} & Jüngster Speciehr \& beinhaltet \textit{short-lived} Objekte.                        \\ \hline
  \texttt{1} & Dieser Speicher dient als Buffer zwischen \textit{short} und \textit{long-lived} Objekten. \\ \hline
  \texttt{2} & Beinhaltet \textit{long-lived} Objekte wie zum Beispiel Daten die jederzeit zugreifbar sind. \\ \hline
  \end{tabularx}
\end{center}
```

## Methoden-Signatur

Eine Methoden-Signatur beschreibt die Struktur einer Methode, welche zum Beispiel bei Overloading und Methodendeklarierungen berücksichtigt werden muss.

```csharp
type function(type param1, type param2) { ... }
```

Die Signatur beinhaltet folgende Informationen:

- Funktionsname
- Parametertypen (`int`,`string`,...)
- `ref` & `out` Modifier

Informationen welche **nicht** berücksichtigt werden:

- Rückgabe*typ*
- Parameter*modifier*
- Parameter*namen*

```csharp
void MyFunc(); //MyFunc()
void MyFunc(int x); //MyFunc(int)
void MyFunc(ref int x); //MyFunc(ref int)
void MyFunc(out int x); //MyFunc(out int)
void MyFunc(int x, int y); //MyFunc(int, int)
int MyFunc(string s); //MyFunc(string)
int MyFunc(int x); //MyFunc(int)
void MyFunc(string[] a); //MyFunc(string[])
void MyFunc(params string[] a); //MyFunc(string[])
```

`\vspace{2mm}`{=latex}

::: {.callout-note}
Der Grund, warum der Returntyp nicht berücksichtigt wird, ist, weil Methoden auch ohne Wertzuweisung ausgeführt werden können.

```csharp
int MyFunc(int x); // MyFunc(int)

int y = MyFunc(2);
MyFunc(2);
```

Die zweite Methodenausführung sieht ähnlich aus wie eine `void`-basierte Methode.
:::

## Exceptions

*Exceptions* sind in den meisten grundlegenden Funktionen implementiert und werden ausgelöst, wenn die entsprechenden Vorgaben nicht eingehalten werden. Ein Beispiel wäre ein Datenpacket via TCP zu verschicken, ohne zuerst mit dem TCP-Server zu verbinden (wenn keine Strasse zur Adresse existiert, wie sollte die Post wissen wo durch?) Bei einer Exception wird die Aufruferkette rückwärts nach einer passenden `catch`{.csharp}-Klausel durchlaufen und falls keine gefunden wird, erfolgt ein Programmabbruch mit Fehlermeldung und Stack-Trace. Exceptions bieten einen strukturierten und kontrollierten Mechanismus um Fehler zu erfassen, zu signalisieren und zu behandeln.

Vorteile:
- Trennung von Fehlerbehandlung und normaler Programmausführung
- Exceptions können detaillierte Informationen über den auftretenden Fehler enthalten
- Fehlerbehandlung erfolgt an zentraler Stelle im Code
- Ausnahmebehandlung erfolgt an beliebiger Stelle
- Exceptions ermöglichen es, Fehler über verschiedene Ebenen des Code-Stacks hinweg zu propagieren

::: callout-important
Die Verwendung/Bearbeitung von Exceptions beansprucht viele Ressourcen, weshalb alle möglichen Fehler zur Laufzeit abgefragt werden sollten (z.B. Null-Reference). Das Programm sollte nicht darauf basieren, dass eine Exception geworfen wird, falls ein abzufragender Fehler auftritt!
:::

### Exceptions abfangen mit `try` & `catch`

```csharp
try {
  // do stuff, that might raise an exception
}
catch (ArithmeticException e) { // explicit
  // catch Arithmetic Exception i.e. x/0
}
catch (Exception e) {
  // catch any other Exception
}
```

Die `catch`-"Parameter" müssen nicht unbedingt existieren, erlauben aber, den Fehler besser zu identifizeren.

### Erweiterung `finally`

Der `finally`-Codeblock wird verwendet, um etwas zu machen, bevor aus der Funktion gesprungen wird mit `return`. Ein Beispiel wäre eine Kommunikation zu beenden. Der `catch`-Codeblock ist optional und kann auch weggelassen werden.

```csharp
try {
  // do stuff
  return thing;
}
catch (Exception e) {
  // catch raised exception
  return other_thing;
}
finally {
  // do stuff here before returning
}
```

### Exception werfen mit `throw`

Mit dem Schlüsselwort `throw` werden Exceptions ausgelöst, welche dann z.B. ausserhalb der Methode mit `catch` gefangen werden können.

```csharp
throw new ArithmeticException("string")
```

## Multithreading `System.Threading`

Ermöglich parallere Ausführung von von Code. Thread-Scheduler stellt sicher, dass alle Threads genug CPU-Zeit erhalten. Jeder Thread hat seinen eigenen Stack, teilt sich aber den Heap mit anderen Threads vom gleichen Prozess. Bei einem Multicore-Prozessor erfolgt die Zuteilung der CPU-Zeit aus einer Mischung von Zeitschlitz-Verfahren und mehreren Cores.

```csharp
static void Main(string[] args) {
  Thread t = new Thread(Run);
  t.Start();
  Console.ReadKey();
}

static void Run() {
  Console.WriteLine("Thread is running...");
}
```

### Lebenszyklus

![](images/Threading/lebenszyklus.png)

### Join

Mit `t.Join()`{.csharp} kann gewartet werden, bis sich ein Thread beendet hat.

```csharp
static void Main() {
  Thread t1 = new Thread(Run);
  t1.Start();
  t1.Join();
}
```

### Sync

Falls ein Thread ein wichtigen Prozess machen muss, kann er diesen mit `lock` oder `Monitor.Enter` sperren. Dabei wird eine Variable mit dem Typ `object` verwendet. Alle anderen Threads, welche an dieser Stelle stehen, warten bis es freigegeben wird.

```csharp
private object syncRoot = new object();
Monitor.Enter(syncRoot);
try {
  // critical section
  // ...
}
finally {
  Monitor.Exit(syncRoot);
}
```

Kurzform:

```csharp
lock(syncRoot) {
  // alternative syntax
  // critical section
  // ...
}
```

### Deadlock

Der Deadblock ist ein Softlock, welcher zwei miteinander interagierenden Threads blockiert. Wenn Thread #1 `lockA` sperrt und direkt danach Thread #2 `lockB` blockiert, haben sich beide Threads gegenseitig gesperrt.

```csharp
void f1() {
  lock (lockA) {
    lock (lockB) {
      /* ... */
    }
  }
}
void f2() {
  lock (lockB) {
    lock (lockA) {
      /* ... */
    }
  }
}
```

### Parametrisierter Thread

Falls ein Parameter übergeben werden muss, kann die delegierte `ParameterizedThreadStart`-Signatur verwendet werden. Der Thread wird normal aufgesetzt und bei `.Start()`

```csharp
static void Main(string[] args)
{
  //...
  TcpClient client = listener.AcceptTcpClient();
  Thread t = new Thread(HandleRequest);
  t.Start(client);
  // ...
}
// must be of ParameterizedThreadStart signature
private void HandleRequest(object _object)
{
  TcpClient client = (TcpClient)_object;
  // ...
}
```

## Boxing & Unboxing

*Boxing* und *Unboxing* ermöglicht das Konvertieren von Wertetypen (`int`, `Bool`, `struct`) in Referenztypen (z.B. `object`) und zurück. Dies kann z.B. hilfreich sein, wenn Wertetypen in einer Sammlung gespeichert werden sollen, welche nur Referenztypen akzeptiert.

Im folgenden Beispiel wird der Integerwert $123$ *geboxed* (impliziter cast) und das neue Objekt zeigt nun auf den geboxted Integer. Zum *unboxen* muss **explizit** gecastet werden!

```csharp
int i = 123;
object o = i; // box the int

// o -> `123`

int j = (int)o; // unbox the object
```

Birgt Risiko von Laufzeitfehlern. Wenn ein Werttyp unbeabsichtigt als Objekt behandelt wird und dann wieder in seinen ursprünglichen Werttyp umgewandelt werden soll, kann es zu Fehlern kommen, wenn die Typen nicht übereinstimmen. Kann mit generischen Listen ungangen werden, da diese die Typensicherheit sicherstellen. Ebenfalls kann ständiges Konvertieren zwischen Werttypen und Objekten die Performance beeinträchtigen.

## Streams

Streams (*Datenströme*) sind ein grundlegendes Konzept für Daten Ein-/Ausgabe. Streams abstrahieren ein dahinterliegendes I/O-Gerät (z.B. Datei, Tastatur, Konsole, Netzwerk, ...) und lassen so C#-Programme Daten darauf lesen oder schreiben. Es wird der Namespace `System.IO`{.csharp} genutzt und alle Streams implementieren die abstrakte `System.IO.Stream`{.csharp} Klasse.

- `FileStream` zum schreiben von Files
- `TextReader` und `TextWriter` für I/O mit Unicode-Zeichen
- `BinaryReader` und `BinaryWriter` für I/O mit Binärdaten
- `MemoryStream` liest und schreibt in den Speicher
- `BufferdStream` erhöht die Performance
- `CryptoStream` zur verschlüsselung von I/O

Beispiel-Code zum Komprimieren, Schreiben und Lesen einer Datei:

```csharp
// Text to file
// BinaryWriter -> GZipStream -> 
// CryptoStream -> Filestream -> Datei 
// Initialize streams in opposite direction 
// (Always from file to top-level-function)
FileStream fs = new FileStream("./Chaining.txt", 
                               FileMode.Create);
GZipStream gs = new GZipStream(fs, 
                      CompressionMode.Compress);
BinaryWriter bw = new BinaryWriter(gs);

// Write
bw.Write("Hello File");
bw.Flush();
bw.Close();

// file to Text
// BinaryReader <- GZipStream <- 
// CryptoStream <- Filestream <- Datei
// Initialize in streams direction 
//(Always from file to top-level-function)
FileStream fsB = new FileStream("./Chaining.txt", 
                                FileMode.Open);
GZipStream gsB = new GZipStream(fsB, 
                      CompressionMode.Decompress);
BinaryReader brB = new BinaryReader(gsB);

// Read
string msg = brB.ReadString();
brB.Close();
```

::: callout-important
- `.Write( ... )` um etwas an den Buffer des Streams zu übergeben
- `.Flush()` um den Buffer zu leeren *(Übertragen)*
- `.Read()` um etwas aus dem Stream zu lesen
- `.Close()` um den Stream zu schliessen **!Immer!**
:::

## Delegates

Delegates sind das OOP-pendant zu *Funktionszeigern* in `C` oder `C++`. Ist eine **Referenztyp-Variable**, welche eine Referenz zu einer Methode enthält. Bei Delegates wird auch der Rückgabetyp der Methode für die Signatur verwendet. Dies gewährleistet die Typsicherheit und Konsistenz bei der Verwendung von Delegates. Gleich wie bei Funktionszeigern in `C` ermöglichen Delegates unter anderem die Implementierung von Callbacks und die Erstellung von Funktionen zur Laufzeit. Im Gegensatz zu Funktionszeigern können mit Delegates (mehrere) Methodenreferenzen auf verschiedene Art gekapselt und übergeben werden. Sie können auf Methoden von Klassen oder Instanzen verweisen.

```csharp
private delegate void Notifier (string message);

// method for Notifier
static void SayHello (string sender) {
  Console.WriteLine($"Hello from {sender}");
}

// main-method
static void Main () {
  // attach method to delegate
  Notifier doNotify = SayHello; 
  doNotify("Hanswurst");
}
// out: "Hello from Hanswurst"
```

Im obigen Beispiel wird dem delegate `doNotify` der Referenz der Methode `SayHello` übergeben. Das Delegate kann nun wie die Methode `SayHello` aufgerufen werden.

::: callout-important
- Die Signatur des Delegates `void Notifier (string message)` muss mit jener der Methode `void SayHello (string sender)` übereinstimmen (auch der Rückgabewert).
- Delegate Methoden dürfen nur aufgerufen werden, wenn diese nicht `NULL` sind, ansonsten wird eine Exception ausgelöst
- Delegates können auch auf statische Methoden zeigen
- Methoden dürfen virtual oder override sein, aber nicht abstract
:::

```csharp
doNotify = Obj.SayGueteMorge;
doNotify = StaticClass.SayMoin;
doNotify = this.SayAdieu;
```

### `.Invoke()`

Anstelle des direkten Funktionsaufruf des Delegates

```csharp
doNotify("Oliver");
```

Kann auch die Methode `.Invoke()` angewendet werden. Diese führt die Methode aus, auf welche das Delegate zeigt

```csharp
doNotify.Invoke("Oliver");
```

Der Vorteil hierbei liegt bei der möglichen Verwendung von `NULL`-checking. So wird das Delegate nur ausgeführt, wenn auch eine Methode zugewiesen wurde.

```csharp
doNotify?.Invoke("Oliver");
```

### Multicast

Es können auch *mehrere* Methoden auf ein Delegate zugewiesen werden, dies wird **Multicast**-Delegate genannt. Bei einem Aufruf oder `.Invoke()` werden der Reihe nach alle Methoden aufgerufen und mit `.GetInvocationList()` wird ein Array der Methoden zurückgegeben.

::: callout-important
- Gibt es einen Rückgabewert, so wird nur der Letzte geliefert
- Alle Methoden müssen die selbe Signatur haben
- Sollte bei der Abarbeitung der Multicast-Delegates eine Exception ausgelöst werden, werden die restlichen Delegates nicht mehr aufgerufen
:::

```csharp
Notifier doNotify;
// add methods to delegate
doNotify += SayHello;
doNotify += SayGoodBye;
// output Hello !and! GoodBye
doNotify.Invoke("Franzl");

// remove a method
doNotify -= SayHello;
// output GoodBye only
doNotify.Invoke("Sissi")
```

## Events

Ein Event wird von einem **Publisher** (Veröffentlicher) ausgelöst und kann von mehreren **Subscribern** (Abonnenten) behandelt werden. Ein Delegate definiert die Signatur des Events, während der **Eventhandler** die Methode repräsentiert, die auf das Event reagiert. Durch die Verwendung von Events können verschiedene Teile einer Anwendung miteinander kommunizieren und Aktionen auslösen, wenn ein bestimmtes Ereignis eintritt.

Ein Event kann nur in der eigenen Klasse (oder Implementierung) geändert und gefeuert werden (Events sind immer `public`). Ausserhalb ist nur das Hinzufügen `+=` und Entfernen `-=` von Eventhandlern erlaubt. Im Gegensatz zu Delegates können Events so nicht von "Ausserhalb" überschrieben werden. Folgendes Beispiel beschreibt die Klasse einer Ereignisquelle.

```csharp
public class Model {
  // event
  event EventHandler<ModelEventArgs> ModelChanged;
  // instantiate arguments
  public ModelEventArgs e;
  e = new ModelEventArgs("Update Model");
  // fire event
  public void Update() {
    ModelChanged?.Invoke()
  }
}
```

::: callout-important
Eventhandler haben wie Delegatesmethoden eine vorgegebene Signatur, die eingehalten werden muss.

```csharp
void EventHandler(object source, EventArgs e);
```

In der Variable **`e`** können zusätzliche Informationen über das Ereignis übermittelt werden. Dafür kann eine erbende Klasse von `EventArgs`{.csharp} erstellt werden, in welcher die Eventdaten festgehalten werden.

```csharp
public class ModelEventArgs : EventArgs {
  // constructor to generate e
  public ModelEventArgs (string eventData) {
    this.EventData = eventData;
  }
  // all data needed in a handler
  public string EventData { get; }
}
```
:::

`\vspace{5mm}`{=latex}

::: callout-tip
### `Eventhandler`

Anstatt einzelne Delegates deklarieren zu müssen, kann das vordefinierte delegate `Eventhandler<TEventArgs>`{.csharp} verwendet werden.

```csharp
EventHandler<MyEventArgs> myEventHandler;
```

:::

Nun können beliebige Klassen und Objekte Methoden auf den *`ModelChanged`* Event registrieren, welche über `Model.Update()` ausgeführt werden. Dies kann auch im Konstruktor einer Klasse geschehen

```csharp
public class View {
  private string Id { get; }

  public View (string id, Model m) {
    this.Id = id;
    // register event
    m.ModelChanged += ChangedHandler;
  }
  // Eventhandler
  private void ChangedHandler (object source, 
                              ModelEventArgs e){
    string data = e.EventData;
    Console.WriteLine($"{Id} does: {data}");
  }
}
```

Es können nun Objekte von `View` erstellt werden, welche sich direkt auf den Event `ModelChanged` registrieren. Wird ein `.Update()` ausgeführt, geschieht dies mit allen Objekten.

```csharp
static void Main() {
  Model m = new Model();
  View v1 = new View("v1", m);
  View v2 = new View("v2", m);
  // fire event
  m.Update();
}
```

Bei Ausführung des Programms erhalten wir so den Output

```bash
v1 does: Update Model
v2 does: Update Model
```

Das Obige Beispiel kann so veranschaulicht werden:

![](images/EventHandling.png)
