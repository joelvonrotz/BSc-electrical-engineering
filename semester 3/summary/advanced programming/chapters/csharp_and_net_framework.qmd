## Vergleich `C` & `C#`

|                 |                      C *(POP)*                     |                   C# *(OOP)*                  |
|:---------------:|:--------------------------------------------------:|:---------------------------------------------:|
|                 | **P**rozedurale **O**rientierte **P**rogrammierung | **O**bjekt **O**rientierte **P**rogrammierung |
|   Compilation   |                     Interpreter                    |              Just-in-time *(CLR)*             |
|    Execution    |                   Cross-Platform                   |                `.Net` Framework               |
| Memory handling |              `free()` after `malloc()`             |               Garbage collector               |
|    Anwendung    |             Embedded, Real-Time-Systeme            | Embedded OS, Windows, Linux, GUIs             |
|  Execution Flow |                      Top-Down                      |                   Bottom-Up                   |
|  Aufteilung in  |                     Funktionen                     |                    Methoden                   |
|   Arbeitet mit  |                     Algorithmen                    |                     Daten                     |
| Datenpersistenz |      Einfache Zugriffsregeln und Sichtbarkeit      | Data Hiding (`privat`, `public`, `protected`) |
|  Lib-Einbindung |              *.h* File mit `#include`              |            *namespaces* mit `using`           |

<!--
(Do more as you'd like. See table "VergleichC.tgn" to use on "https://www.tablesgenerator.com/markdown_tables")
-->

`\begin{multicols}{2}`{=latex}

## Struktur `C#`-Programm

Als minimale Sprachelemente für ein C#-Programm benötigt man eine Namespace-Deklaration, einen Einstiegspunkt (Entry Point) und eine Klasse.

### Namespace {#sec-namespace}

```csharp
namespace { ... }
```

NET's verwendet `namespace`'s, um seine vielen Klassen zu organisieren. Mit eigenen `namespace`'s kann der Umfang von Klassen- und Methodennamen in grossen Programmierprojekten zu kontrollieren. Sind immer implizit `public`{.csharp}.

```csharp
namespace SampleNamespace {
  class SampleClass {...}
  struct SampleStruct {...}
  enum SampleEnum {a, b}

  namespace Nested {
    class SampleClass {...}
  }
}
```

Um Klassen / Methoden anderer `namespace`'s aufzurufen, können diese über `using` eingebunden werden. Alternativ geschieht der Aufruf über `<namespace>.SampleClass`.

### Klassen

Klassen beschreiben den Bauplan von Objekten. Wenn man das nicht versteht, nützt dir auch der Rest der Zusammenfassung nichts ;)

Eine Klasse ist eine Sammlung von **Daten** und **Methoden**. Es wird das Keyword `class` genutzt.

::: {.callout-important}
* Pro Datei eine Klasse
* Klassenname = Dateiname
* Namensgebung von Klassen: `PascalCase`
:::

Klassen können mit dem Schlüsselwort `static`{.csharp} statisch angelegt werden. Von statischen Klassen können keine Objekte erstellt werden, die Methoden sind immer über den Klassennamen aufrufbar. Ein Beispiel hierfür ist die `Math`{.csharp} Klasse.

```csharp
Math.Atan2(5, 1);
```

### Konstruktor
Konstruktoren werden beim Erstellen von neuen Objekten aufgerufen. Ihnen können Parameter oder andere Objekte übergeben werden. Der Rückgabewert des Konstruktors ist die Objektreferenz. Zugriff auf das eigene Objekt mit `this`{.csharp}. 

```csharp
public class Point {
  int size;
  public Point(int size) {
    this.size = size;
  }
}

public Program {
  static void Main() {
    // initialize new Point object
    Point smallPoint = new Point(2);
  }
}
```

::: callout-caution
 Der Default-Konstruktor nimmt keine Parameter entgegen. Wird ein Konstruktor angegeben, so ist der Default-Konstruktor nicht mehr aufrufbar.
:::

### Destruktor

Destruktoren werden verwendet, um die Resourcen von Objekten freizugeben. Es ist bereits ein Standard-Destruktor implementiert, welcher nur in seltenen Fällen überschrieben wird. Der Destruktor wird automatisch vom Garbage-Collector aufgerufen.

```csharp
public class MyClass {
    // Other members of the class...
    ~MyClass() {
      // Release resources held by the object here
    }
}
```

### Methoden

Methoden sind das C#-pendant der Funktionen in C. Der Zugriff auf Methoden kann mit Zugriff-Modifizierern *(siehe @sec-modifier)* eingeschränkt werden. Methoden werden über Objekte aufgerufen. Die Methodensignatur besteht aus dem Methodennamen und allen Parametern. Der Rückgabetyp ist nicht Teil der Methodensignatur, da dieser Eigenschaft der Implementierung der Methode ist und nicht benötigt wird, um den Aufruf der Methode zu definieren.

```csharp
MyClass NewObject = new MyClass("some string");
NewObject.DoSomething();

public class MyClass {
  public void DoSomething() {
    // do something
  }
}
```

Um Methoden ohne Objekte aufrufen zu können, ist das Schlüsselwort `static` nötig. Für den Zugriff wird der Klassenname der Methode vorangestellt und mit einem Punkt getrennt. Statische Methoden werden nur einmal erzeugt.

```csharp
MyClass.DoSomething();

public class MyClass {
  public static void DoSomething() {
    // do something
  }
}
```

Die `Main(string[] args) {}`{.csharp}-Methode beschreibt den Einstiegspunkt eines Programms. In `args`{.csharp} sind Programm-Parameter gespeichert welche z.B. bei einer Konsolenapplikation angefügt werden (folgendes Beispiel mit `--debug`). Die `Main`{.csharp}-Methode muss static sein, da sie ohne eine Instanz einer Klasse aufgerufen werden kann.

```{.bash}
dotnet MyProgram.dll --debug
```

### Membervariablen

Membervariablen sind **Daten** oder **Attribute** eines Objektes. So ist z.B. `color` eine Membervariable in der Klasse `car`. Membervariablen können mit Zugriff-Modifizierern (siehe @sec-modifier) eingeschränkt werden.

Deklaration:

```csharp
public class Point {
  private int xPos = 0;
  private int yPos = 0;
}
```
Für Membervariablen wird auf dem **Heap** Speicher reserviert. Membervariablen sollten explizit initialisiert werden, die Standardwerte der automatischen Initialisierung sind:

* Numerische Typen **`0`**
* enum **`0`**
* boolean **`false`**
* char **`'\0'`**
* Referenzen **`null`**

::: callout-important
* Pro Enum eine Datei
* Member beginnen mit Kleinbuchstaben: `fristName`
* Enum's und Klassen beginnen mit Grossbuchstaben: `Person`, `Gender`
* Member sollten grundsätzlich `private` sein
* Enum's und Klassen sind grundsätzlich `public`
* Member explizit initialisieren: `int x = 0;`
:::

### Getter- und Setter-Methoden

Getter- und Setter-Methoden werden für kontrolliertes Verändern und Abfragen von Variablen verwendet. Meistens möchte man bei einer Membervariable den Wert zuerst prüfen, bevor diese beschrieben wird, und dafür werden Getter und Setter verwendet. `Properties` besitzen diese Methoden mit `get` und `set`.

::: callout-caution
* Globale Variablen vermeiden
* Kein direkter Zugriff auf Variablen durch `public`
:::

Um diese Anforderungen zu bewältigen, wird auf sogenannte **Getter**- und **Setter**-Methoden zurückgegriffen.

```csharp
public class Point {
  private int xPos;//not viewable from outside
  public void SetXPos(int xPos){//set from outside
    this.xPos = xPos;
  }
  public int GetXPos() {//get from outside
    return xPos;
  }
}
```

### Property {#sec-property}

*Getter*- und *Setter*-Methoden sind sehr umständlich und führen bei vielen Variablen zu viel Code. Aus diesem Grund werden automatische Getter- und Setter-Methoden genutzt, nämlich **Properties** mit den Schlüsselwörtern `get` und `set`. Properties, die mit `private set`{.csharp} gekennzeichnet sind, können nur vom Konstruktor aus intialisiert werden. Propertier ohne `set`{.csharp} sind `readonly`{.csharp} und können nur bei der Deklaration initialisiert werden.

```csharp
public class Point {
  private int xPos;
  private int yPos;

  public int XPos {    // property
    get { return xPos; }
    set { xPos = value }
  }

  // short version working as above
  public int XPos { get; set; }

  // readonly property
  public int YPos => yPos;

  // restrict certain access
  public int Width { get; private set; }
  public int Height { private get; set; }

  // with initialization
  public int Area { get; set; } = 125;
}
```

Von aussen können Properties wie "normale" Variablen verwendet werden, diese rufen im Hintergrund jedoch eine Methode auf. Diese Methode kann beliebig ergänzt bzw. überschrieben werden. So können auch Fehleingaben abgefangen werden oder es wird eine Membervariable geschrieben, welche nur indirekt mit der Property zu tun hat.

```csharp
private uint Birthyear;
public uint Age {
  get { 
    return ((uint)DateTime.Now.Year - Birthyear); 
  }
  set { 
    this.Birthyear = ((uint)DateTime.Now.Year -
      value); 
  }
}
```

::: callout-important
## Namensgebung
Da Properties Methoden enthalten können, gilt: `PascalCase`
:::

### Objekterzeugung
Mit `new`{.csharp} wird ein neues Objekt erzeugt. Dabei wird vom Memory-Management Speicher für das Objekt angefordert und eine Objektreferenz wird zurückgegeben. Sobald ein Objekt nicht mehr benötigt wird, wird es zerstört und der Speicher freigegeben. Beim Instantieren eines Objektes wird der Konstruktor aufgerufen.

```csharp
Point p1:
p1 = new Point(5,10);
Point p2 = new Point(2,5);
// Zerstörung
p1 = null;
```

## .Net Bibliotheken

### `System`

Der `System`-Namespace beinhaltet einige der Fundamentalen C#-Klassen und Strukturen.

#### `System.Console`

Mit der Klasse `Console` wird mit der Konsole interagiert, folgend sind die grundlegenden Funktionen beschrieben:

- Ausgabe auf Konsole

```csharp
// Write on line
Console.Write("Hello");
// Write, followed by new Line
Console.WriteLine("World");
```

- Lesen von Konsole

```csharp
// Read next char from stream
int c = Console.Read();
// Read next line from stream
string msg = Console.ReadLine();
// Read Key with modifiers
ConsoleKeyInfo k = Console.ReadKey();
```

`Console.Read()`{.csharp} blockiert Rückgabe, bis Eingabetaste betätigt wird. Nachfolgende Aufrufe rufen Eingabe zeichenweise ab. Nachdem das letzts Zeichen aufgerufen wurde, blockiert die Rückgabe erneut. Gibt -1 zurück, wenn keine weitere Zeichen mehr gelesen werden können oder Crtl+Z eigegeben wird.

`Console.ReadKey()`{.csharp} blockiert, bis ein Zeichen oder eine Funktionstaste gedrückt wird und `Console.ReadLine()`{.csharp} blockiert, bis Eingabetaste betätigt wird.

Mit `.ReadKey()`{.csharp} werden auch Tasten gelesen, die kein char ergeben *(z.B. Enter, Backspace,...)*. 
Mit `k.Key == ConsoleKey.Escape`{.csharp} kann zum Beispiel überprüft werden, ob die *Escape*-Taste gedrückt wurde. 
Mit `k.Modifiers == ConsoleModifiers.Shift`{.csharp} kann zudem überprüft werden, ob ein Charakter mit einem Modifier (hier *Shift*) verwendet wurde.
Mit `char c = k.KeyChar`{.csharp} wird zudem direkt der Charakter ausgelesen.

- Konsole leeren

```csharp
Console.Clear();
```

- Modifizieren des Cursors

```csharp
// Get Cursor position !screen relative!
(int l, int t) = Console.GetCursorPosition();
// Set Cursor position !screen relative!
Console.SetCursorPosition(newLeft, newTop);
```

- Auf Tastenanschlag prüfen

```csharp
if (Console.KeyAvailable) {
  // Do stuff with key
  // !Key must be read for no further activation!
}
```

#### `System.String`

Strings sind im vergleich zu C lediglich **read-only**. String variablen sind grundsätzlich Pointer, die auf den eigentlichen String im Speicher zeigen. Dies hat zur Folge, dass Methoden immer einen String *(Adresse zum **neuen** String)* als return-Wert haben.

```csharp
string name = "Hansli";
name.ToLower();
Console.WriteLine(name);  // "Hansli"
name = name.ToLower();
Console.WriteLine(name);  // "hansli"
```

::: callout-note
# String Characteristics

- `string`{.csharp} ist ein *Referenztyp*
- ist unveränderlich
- Kann `NULL` (`"\0"`) enthalten
- **`==`**-Operator wird als "Stringvergleicher" überschrieben (vergleicht Inhalt, nicht Referenz)
:::

Strings können auch durch **Aneinanderreihung** mehrerer Strings erstellt werden:

```csharp
string s1 = "Hello";
string s2 = "World";
string str = s1 + " " + s2; // Hello World
```

Strings können auch durch **Konstruktoren** erstellt werden:

```csharp
char[] ch = {'H','o','i'};
string s1 = new string(ch);

// string with repeated characters
string s2 = new string('G',20);
```

Über die Property **`Char[]`** kann auf die Zeichen des Strings indexiert werden:

```csharp
string s1 = "Hello";
Console.Write(s1[1]); // out: e
```

Die Property **`Length`** beschreibt die Länge des Strings:

```csharp
string s1 = "Hello";
Console.Write(s1.Length); // out: 5
```

##### Weitere nützliche Methoden

- `String.Compare(string s1, string s2)`{.csharp} vergleicht den Inhalt lexikalisch :)
- `s1.Contains(Char c)`{.csharp} prüft den String auf vorhandensein eines Charakters
- `s1.Equals(string s2)`{.csharp} prüft den Inhalt auf Gleichheit
- `s1.Insert(int index, string s2)`{.csharp} gibt einen String zurück in dem `s2` an der Stelle `index` eingefügt wurde
- `s1.Replace(char c1, char c2)`{.csharp} gibt einen String zurück, in dem `c1` mit `c2` ausgetauscht wurde
- `s1.Split(char c)`{.csharp} gibt ein StringArray mit den jeweils bei `c` getrennten substrings zurück
- `String.Join(string[] str)`{.csharp} gibt einen zusammengefügten String des Stringarrays zurück
- `s1.ToCharArray()`{.csharp} gibt ein CharArray (No Joke) mit den Charaktern zurück
- `s1.ToLower()`{.csharp} gibt einen - in lowercase konvertierten - String zurück
- `s1.ToUpper()`{.csharp} gibt einen - in UPPERCASE konvertierten - String zurück
- `s1.Trim()`{.csharp} entfernt alle Whitespaces am Ende und am Anfang und gibt diesen String zurück

#### `System.Environment`

Die `System.Environment`-Klasse beinhaltet nützliche Informationen bezüglich des gerade benutzen Gerätes, Versionen, etc.

`Environment.`

- `Current Directory` Programmverzeichnis
- `ProcessPath` Programmpfad
- `Is64BitOperatingSystem` True/False
- `OSVersion`
- `MachineName`
- `ProcessorCount` Anzahl (virtueller) Prozessoren
- `TickCount` Anzahl Ticks seit Aufstarten
- `UserName`
- `UserDomainName`
- `CurrentManagedThreadId` Thread Id
- `Version` Common Language Runtime *CLR* Version
- `GetLogicalDrives()` gibt ein Stringarray aller Laufwerke

Es gibt zudem noch weitere Variablen, welche nicht direkt über eine Methode einsehbar sind und mit `Environment.GetEnvironmentalVariable()` abgerufen werden können (z.B. `"PROCESSOR_IDENTIFIER"`). Mit folgendem Beispiel sind alle Variablen einsehbar:

```csharp
Console.WriteLine("GetEnvironmentVariables: ");
  foreach (DictionaryEntry de in 
      Environment.GetEnvironmentVariables()) {
    Console.WriteLine("  {0} = {1}", de.Key,
      de.Value);
  }
```

## Keywords

### Operatoren & Rangreihenfolge

#### Rangreihenfolge

Die Tabelle listet alle Operatoren in C# von höchstem zu tiefstem Vorrang auf.

<!--![](images/OperationOrder.png)-->

```{=latex}
\begin{center}
  \begin{tabularx}{\linewidth}{|p{4cm}|X|}
  \hline
  \textbf{Operator} & \textbf{Category or name} \\ \hline
x.y\textbf{,} f(x)\textbf{,} a{[}i{]}\textbf{,} x?.y\textbf{,} x?{[}y{]}\textbf{,} x++\textbf{,} x--\textbf{,} x!\textbf{,}   new\textbf{,} typeof\textbf{,} checked\textbf{,} unchecked\textbf{,} default\textbf{,} nameof\textbf{,} delegate\textbf{,} sizeof\textbf{,}   stackalloc\textbf{,} x-\textgreater{}y &
  Primary \\ \hline
+x\textbf{,} -x\textbf{,} !x\textbf{,} $\sim$x\textbf{,} ++x\textbf{,} --x\textbf{,} \textasciicircum{}x\textbf{,} (T)x\textbf{,} await\textbf{,}   \&x\textbf{,} *x\textbf{,} true and false                & Unary                                      \\ \hline
x..y                                                                                                      & Range                                      \\ \hline
switch\textbf{,} with                                                                                              & switch and with expressions                \\ \hline
x * y\textbf{,} x / y\textbf{,} x \% y                                                                                      & Multiplicative                             \\ \hline
x + y\textbf{,} x – y                                                                                              & Additive                                   \\ \hline
x \textless{}\textless  y\textbf{,} x \textgreater{}\textgreater y\textbf{,} x   \textgreater{}\textgreater{}\textgreater y & Shift                                      \\ \hline
x \textless y\textbf{,} x \textgreater y\textbf{,} x \textless{}= y\textbf{,} x \textgreater{}= y\textbf{,} is\textbf{,}   as                          & Relational and type-testing                \\ \hline
x == y\textbf{,} x != y                                                                                            & Equality                                   \\ \hline
x \& y                                                                                                    & Boolean logical AND or bitwise logical AND \\ \hline
x \textasciicircum y                                                                                      & Boolean logical XOR or bitwise logical XOR \\ \hline
x | y                                                                                                     & Boolean logical OR or bitwise logical OR   \\ \hline
x \&\& y                                                                                                  & Conditional AND                            \\ \hline
x || y                                                                                                    & Conditional OR                             \\ \hline
x ?? y                                                                                                    & Null-coalescing operator                   \\ \hline
c ? t : f                                                                                                 & Conditional operator                       \\ \hline
x = y\textbf{,} x += y\textbf{,} x -= y\textbf{,} x *= y\textbf{,} x /= y\textbf{,} x \%= y\textbf{,}   x \&= y\textbf{,} x |= y\textbf{,} x \textasciicircum{}= y\textbf{,} x \textless{}\textless{}= y\textbf{,} x \textgreater{}\textgreater{}= y\textbf{,} x \textgreater{}\textgreater{}\textgreater{}= y\textbf{,}   x ??= y\textbf{,} =\textgreater{} &
  Assignment and lambda declaration \\ \hline
\end{tabularx}
\end{center}
```

#### Null Checking

Der `x?[y]` Operator gibt `NULL` zurück, wenn die linke Seite `NULL` ist.  So muss kein `null`-Zeiger-Test gemacht werden.

Der `a??b` Operator gibt `a` zurück, wenn dieser nicht `NULL` ist, andernfalls `b`.


### Zugriffs-Modifier {#sec-modifier}

Siehe @sec-modifiertable

<!-- ![](images/AccessModifiers.png) -->
*Modifier* sind auf Klassen, Enum, Membervariablen, Properties und Methoden anwendbar.

### `using`

Die `using`-Direktive teilt dem Compiler mit, welcher `namespace` während der Kompilierung verwendet werden soll. Wenn `using` nicht verwendet wird, muss bei einem Methodenaufruf auch der entsprechende `namespace` genannt werden.

```csharp
// w/o `using`
System.Console.WriteLine("Hello World!");

// w/ `using`
using System;
...
Console.WriteLine("Hello World!");
```

### `static`

Statische ***Methoden*** ...

* ... erhalten eine **fixe** Adresse
* ... können nur **einmal** vorkommen
* ... gehören der Klasse, **nicht** dem Objekt
* ... sind ohne ein Objekt zu erstellen aufrufbar

Statische ***Variablen*** ...

* ... erhalten eine **fixe** Adresse
* ... kommen pro Klasse nur **einmal** vor
* ... haben für alle Objekte den gleichen Wert
* ... werden in der Klasse, **nicht** im Objekt gespeichert
* ... sind ohne ein Objekt zu erstellen aufrufbar

::: callout-caution
## Namensgebung statischer Variablen

* Öffentlich: `PascalCase`
* Privat: `camelCase`
:::

```csharp
class Program {
  static void Main(){
    Employee.PrintEmployeeCount();  // 0
    Employee Hansli = new Employee ("Hans");
    Employee.PrintEmployeeCount();  // 1
  }
}

class Employee {
  public string Name { get; private set; }
  // one counter for all employees
  private static uint employeeCount = 0;

  public Employee (string name) {
    this.Name = name;
    employeeCount++;
  }
  // always callable through class
  public static void PrintEmployeeCount () {
    Console.WriteLine( employeeCount );
  }
}
```

Statische **Klassen** ...

* ... können **nicht** instanziert werden
* ... beinhalten nur statische Methoden und Variablen

Die `Math` Klasse ist statisch und muss darum nicht instanziert werden. Trotzdem kann auf statische Variablen zugegriffen werden. So ergibt `Math.Cos(Math.PI)` direkt den Wert $-1$.

### `const`

Konstante Variablen ...

* ... müssen bei der deklaration initialisiert werden
* ... müssen zur Kompilierzeit berechnet werden können 
`public const int MaxValue = int.MaxValue / 10;`{.csharp}
* ... können bei gleichem Typ zusammen deklariert werden
`public const int Months = 12, Weeks = 52;`{.csharp}

* ... dürfen bei Deklarierung durch Berechnung nicht rekursiv sein
`public const int WeeksPerMonth = Week / Month;`{.csharp}

Der Zugriff ausserhalb erfolgt über den Klassennamen
`int months = Calendar.Months`{.csharp}

### `readonly`

Readonly Variablen ...

* ... müssen **nicht** zur Kompilierzeit berechnet werden können
* ... können bei der Deklaration gesetzt werden
* ... können im Konstruktor gesetzt werden
* ... können anschliessend **nichtmehr** geändert werden

```csharp
public class BankAccount {
  private readonly AccNumber;
  public BankAccount ( int accNum ) {
    this.AccNumber = accNum; 
  } // AccNumber can't be changend from here on
}
```

## Datentypen

Wie in C gibt es in C# Wertetypen und Referenztypen. Wertetypen enthalten eine Instanz des Typs, werden direkt auf dem Stack gespeichert und enthalten den Wert der Variable. Referenztypen enthalten eine Referenz zu einer Instanz des Typs, werden im Heap-Speicher abgelegt und enthalten die Adresse zum Speicherort. Änderungen an einem Referenztyp wirken sich auf alle Variablen aus, die auf dieselben Daten verweisen.

![](images/Types.png)

### Wertetypen
![](images/Datatypes.png)
### Casting
Umwandlung von einem Datentyp in einen anderen.

![](images/Casting.png)
#### Explizites Casting
```csharp
int counter = (int)3.5;
```
#### Implizites Casting
```csharp
int j = int.MaxValue;
long longVar = j;
```

#### `Convert`
In der Klasse `Convert`{.csharp} sind Methoden enthalten, um Basisdatentypen in einen anderen Basisdatentypen zu konvertieren.
```csharp
double dNum = 23.15;
// Returns 23
int iNum = Convert.ToInt32(dNum);
```

### `struct`

::: callout-tip
## Unterschied `struct` & `class`

`struct`s sind *value* Typen und übergeben jeden Wert / jede Eigenschaften. `class` sind *reference* Typen und werden als Referenz übergeben.

- `class` $\rightarrow$ call by reference (Übergabe als Reference)
- `struct` $\rightarrow$ call by value (Übergabe als Wert)

:::

### `string`

Strings werden wie folgt deklariert:

```csharp
// Declare without initializing.
string message1;

// Initialize to null.
string message2 = null;

// Initialize as an empty string.
// Empty constant instead of the literal "".
string message3 = System.String.Empty;

// Initialize with a regular string literal.
string oldPath = "c:\\Program Files\\Python";

// Initialize with a verbatim string literal.
string newPath = @"c:\Program Files\Python";

// String examples with a verbatim literal.
string msg = @"Hello
World!";
string quote = @"She said, ""Hello""";
string escaped = @"\tHello,\nWorld!";

```

Mit dem Verbatim-Literal `@` werden Zeilenumbrechende Zeichen als Teil des Strings behandelt.

::: callout-important

Strings können nicht verändert werden -> sind **read-only**. Das bedeutet, dass bei jeder Veränderung eine Kopie erzeugt und neu abgespeichert wird, wobei der ursprüngliche String dem Garbage Collector übergeben wird.

```csharp
string s = "Hallo Welt";

s[1] = 'A'; // ERROR
```
:::

#### String-Casting

Um einen Zahlentyp in einen `string`{.csharp} zu konvertieren, können die Methoden `ToString()`{.csharp} oder `string.Format`{.csharp} aufgerufen werden.

```csharp
string s = "55";
// Schreibt die Zahl in s in integer i
int.TryParse(s, out int i);
string s = "5.5"
// Schreibt die Zahl in s in integer i
double.TryParse(s, out double d);
```

#### Stringformatierung

Parameter / Variablen können direkt in Strings eingefügt werden.

Formatierte Ausgaben werden mit folgender Syntax erreicht:
{index[,alignment][:formatString]}

```csharp
// C-Sytle
Console.WriteLine("{0} + {1} = {2}",a,b,res);

// C#-Style
Console.WriteLine(a + " + " + b + " = " + res);

// C# formatted string
Console.WriteLine($"{a} + {b} = {res}");
```

### Aufzählungstypen (`enum`)

Enumerationen sowie Klassen sollten der Übersichtlichkeit wegen in eigenen Dateien erstellt werden. Um Enums in logischen Operation oder als Flags zu nutzen, kann dies mit dem Attribut `[Flags]`{.csharp} angegeben werden.

```csharp
// File: ButtonState.cs
[Flags]
public enum Button{
  NONE = 0,
  LEFT = 1,
  RIGHT = 2,
  UP = 4,
  DOWN = 8
}
```

Verwendet werden Enums mit ihren Namen (`Button btn = Button.LEFT`{.csharp}). Zudem können diverse Rechenoperationen auf sie angewendet werden.

```csharp
// Vergleich
  if(c == Colors.Yellow) ...                    
  if(c > Colors.Green && c < Colors.Yellow) ...
// +, -, ++, --
  c = c + 1;    c++;                                
// &, |, ~
  btn.UP & btn.DOWN  // = "12" -> UP, DOWN  
```

Im Gegensatz zu `Enums`{.csharp} in `C`{.csharp} werden Enumerationen in `C#`{.csharp} als echte Typen anstatt als Interger-Werte interpretiert.

### Array

C# Arrays sind ähnlich wie C Arrays, also eine Datenstruktur, um eine Sammlung von Elementen desselben Datentyps zu speichern. C# Arrays erben von `object`. Um Arrays nach einer Deklaration verwenden zu können, muss dieses initialisiert werden.

Sie [verhalten]{.underline} sich wie [Array-Zeiger]{.underline} und wenn es auf kein Array zeigt, was solls denn tun?

```csharp
type[] arrayName;
//zum Beispiel
int[] catPhotoStock;
```

Nach Initialisierung besitzen Arrays eine **nicht** änderbare Grösse (ähnlich wie `string`). Mehrere Array-Methoden erstellen ein komplett neues Array mit den Angaben und überschreiben die Array-Variable (z.B. `void Resize<T> (ref T[]? array, int newSize)`{.csharp}).

::: {.callout-important}
#### Cooli Facts

- Die Grösse eines Arrays wird bei der Initialisierung festgelegt. Diese Grösse kann **nicht** verändert werden.
- Die Variable dient als Array-Zeiger.
- Deklarierungen müssen via `new type[...]` initialisiert werden.
- Mit `.Length` bei eindimensionalen und `.GetLength(dimension)` bei multidimensionalen Arrays erhält man die Grösse. (`.GetLength(0)` für 1.Dimension, `...(1)` für 2., etc.)
:::

Hauptsächlich unterscheidet man zwischen **drei** Typen von Arrays: dem eindimensionalen, multidimensionalen und jagged Array.

Ein **eindimensionales** Array ist das *de facto* Array und besitzt eine Dimension.

```csharp
// Single-dimensional array [5]
int[] array1 = new int[5];
int[] array2 = new int[] { 1, 3, 5, 7, 9 };
int[] array3 = { 1, 2, 3, 4, 5 };
```

Ein **Multi-dimensionales** oder **rechteckiges** Array besteht aus mehr als einer Dimension.

```csharp
// Mutli-dimensional Array [2,3]
int[,] multiArray1 = new int[2, 3];
int[,] multiArray2 = { {1,2,3} , {4,5,6} };
```

Ein **Jagged** Array ist ein Array-von-Arrays. Der Vorteil dieser Art ist, dass die *Unter*arrays unterschiedlicher Länge sein können (ähnlich wie C-Array mit Array-Zeigern).

```csharp
int[][] jaggedArray = new int[6][];

// Set the values of the first array
// in the jagged array structure.
jaggedArray[0] = new int[4] { 1, 2, 3, 4 };
```

Mit `.Rank` können die Anzahl Dimensionen ermittelt werden. `array1.Rank` würde den Wert `1` ergeben, `multiArray1.Rank` den Wert `2` und `jaggedArray.Rank` ergibt [`1`]{.underline}.
