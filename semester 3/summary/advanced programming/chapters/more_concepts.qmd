## Message Queuing Telemetry Transport

![](images/mqtt/flow_graph.png)

MQTT ist ein Nachrichtenprotokoll nach dem Publish/Subscribe-Prinzip. Clients verbinden sich mit einem Broker, welcher die Publish & Subscribe-Nachrichten bearbeitet. Abonniert ein Subscriber einen Sensor, merkt sich der Broker die Identität des Subscribers und leitet alle Publishs des Sensor zu diesem Subscriber weiter. Eine Nachricht besteht aus einem Topic und einer Nachricht, also dem Inhalt. Topics werden meistens in Form von `<ID>/<Topic>/<subtopic>` verwendet, wobei jeder Teil einem *Topic-Level* entspricht. Dumm gesagt, `<ID>` ist ebenfalls ein Topic.

Mit Wildcards `#` und `+` kann bei mehreren Topics "subscribed" werden. `+` ist die Single-Level Wildcard und betrachtet nur das Topic-Level in das es eingesetzt wurde. 

```{=latex}
\texttt{myhome\textcolor{ForestGreen}{/}EG\textcolor{ForestGreen}{/}\textcolor{BrickRed}{\textbf{+}}\textcolor{ForestGreen}{/}temperature}
```

```{=latex}
\begin{center}
\begin{tabularx}{\linewidth}{cX}
\hline
\textcolor{ForestGreen}{\faCheck} & \texttt{myhome/EG/livingroom/temperature} \\
\textcolor{ForestGreen}{\faCheck} & \texttt{myhome/EG/kitchen/temperature} \\
\textcolor{BrickRed}{\faTimes} & \texttt{myhome/EG/kitchen/\textcolor{BrickRed}{brightness}} \\
\textcolor{BrickRed}{\faTimes} & \texttt{myhome/\textcolor{BrickRed}{OG}/kitchen/temperature} \\
\textcolor{BrickRed}{\faTimes} & \texttt{myhome/EG/kitchen/\textcolor{BrickRed}{fridge}/temperature} \\
\end{tabularx}
\end{center}
```

`#` ist die Multi-Level Wildcard und betrachtet mehrere Topic-Levels ab Einsetzung. 

```{=latex}
\texttt{myhome\textcolor{ForestGreen}{/}EG\textcolor{ForestGreen}{/}\textcolor{BrickRed}{\textbf{\#}}}
```

```{=latex}
\begin{center}
\begin{tabularx}{\linewidth}{cX}
\hline
\textcolor{ForestGreen}{\faCheck} & \texttt{myhome/EG/livingroom/temperature} \\
\textcolor{ForestGreen}{\faCheck} & \texttt{myhome/EG/kitchen/temperature} \\
\textcolor{ForestGreen}{\faCheck} & \texttt{myhome/EG/kitchen/brightness} \\
\textcolor{BrickRed}{\faTimes} & \texttt{myhome/\textcolor{BrickRed}{OG}/kitchen/temperature} \\
\end{tabularx}
\end{center}
```

::: {.callout-warning}
#### Retained Message `-r`

Mit `-r` kann die Nachricht als *retained* markieren. Dies führt dazu, dass der Broker diese Nachricht speichert und bei einer Anmeldung wird die entsprechende *retained* Nachricht direkt verschickt.
:::

### Bash mit `mosquitto`

Mit der Applikation `mosquitto` können Publish-Nachrichten mit `mosquitto_pub -t "<topic>" -h "<host>" -m "<msg"`{.bash} versendet werden. Mit `mosquitto_sub -t "<topic>" -h "<host>"`{.bash} kann ein Subscription-Prozess gestartet werden.

::: {.callout-note}
Ein nützlicher Host ist `http://broker.hivemq.com/`.
:::

### C# mit `M2Mqtt`

Mit dem Package *M2MqttDotnetCore* von *Hamidreza Mohaqeq* kann via MQTT mit anderen Clients interagiert werden.

#### Subscribing

Zum Verbinden wird eine zusätzliche GUID benötigt. Diese kann via `Guid.NewGuid().ToString()`{.bash} erhalten werden.

```csharp
// create client instance 
MqttClient client = new MqttClient(
  IPAddress.Parse(MQTT_BROKER_ADDRESS)); 
// register to message received 
client.MqttMsgPublishReceived += MsgPubReceived; 
string clientId = Guid.NewGuid().ToString(); 
client.Connect(clientId); 
// subscribe to the topic "/home/temperature"
// ...with QoS 2 
client.Subscribe(
  new string[] {"/home/temperature"},
  new byte[] {MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE}); 
 
static void MsgPubReceived(
  object sender,
  MqttMsgPublishEventArgs e) 
{ /* handle message received */ } 
```

#### Publishing

```csharp
// create client instance 
MqttClient client = new MqttClient(IPAddress
                    .Parse(MQTT_BROKER_ADDRESS)); 
 
string clientId = Guid.NewGuid().ToString(); 
client.Connect(clientId); 
 
string strValue = Convert.ToString(value); 
 
// publish a message on "/home/temperature" topic
// ...with QoS 2 
client.Publish("/home/temperature",
  Encoding.UTF8.GetBytes(strValue),
  MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE, false); 
```

## Netzwerk

Jeder **Host** hat eine **IP-Adresse** (IPv4: 32 Bit oder IPv6: 128 Bit). Es wird jedoch mit Hostnamen gearbeitet. Die Zuordnung zwischen IP und Hostname übernimmt der **DNS**. Im PC-Terminal kann der DNS mit `nslookup *Hostname*`{.bash} ermittelt werden.

![](images/Networking.png)

Daten werden über das Schichtenmodell zwischen den Hosts ausgetauscht. Im internet wird über *IP-Adresse* und *Ports* (16 Bit, 0-65535) adressiert. Ein grossteil der Port-Nummern sind [standardisiert](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers) (bsp.: 22 für SSH, 80 für HTTP). IP und Port ergeben zusammen den **Socket**.

![](images/InternetLayers.png)

### Netzwerkkommunikation in .NET

Der Namespace `System.Net`{.csharp} bietet Implementierungen von Internetprotokollen (wie *TCP*, *UDP*, *HTTP*) und Internetdiensten (wie *DNS*). `System.Net.Sockets`{.csharp} bietet Klassen für datenstrom-orientierte Kommunikation über Sockets. Für die Kommunikation wird die IP-Adresse oder der Hostname für den Endpunkt benötigt

```csharp
IPAddress ip1 = IPAddress.Parse("192.168.1.2");
IPEndPoint ep1 = new IPEndPoint(ip, 1234);

IPAddress Ip2 = 
        Dns.GetHostEntry("eee").AddressList[0];
IPEndPoint ep2 = new IPEndPoint(ip2, 1234);
```

Es ist zu wissen, dass bei einem `.WriteLine()`{.csharp} oder `.ReadLine()`{.csharp} immer nur auf den Puffer zugegriffen wird und nicht direkt auf den verbundenen Host. Die Datenübermittlung übernimmt das Betriebssystem.

![](images/BufferedNet.png)

### TCP

Bei **TCP** (Transmission Control Protocol) wird sichergestellt, dass Daten ohne Übertragungsfehler und in der richtigen Reihenfolge übertragen werden (z.B. *www*, *ssh*, *FTP*, *Email*). **Verbindungsorientiertes** Bytestrom Protokoll. Die Klasse `System.Net.TcpClient`{.csharp} stellt funktionalitäten wie `Connect()` für das TCP-Protokoll zur Verfügung

```csharp
IPEndPoint ep = new IPEndPoint(ip, 13);
TcpClient tcpClient = new TcpClient();
tcpClient.Connect(ep);

//short version
TcpClient otherTcpClient = new TcpClient();
otherTcpClient.Connect("hostname", 13);
```

Mit `Socket socket = tcpClient.Client;`{.csharp} erhält man den Socket des Clients.

Zur Kommunikation werden Streams verwendet, wobei der `NetworkStream` bidirektional verwendbar ist. Über ein `StreamReader` und `StreamWriter` sind Daten zu senden und empfangen. 

```csharp
NetworkStream stream = tcpClient.GetStream();

StreamReader sr = new StreamReader(stream);
StreamWriter sw = new StreamWriter(stream);
sw.WriteLine("Hello Internet");
// Don't expect imediate response! (Server)
string s = sr.ReadLine();
tcp.Client.Close();
```

#### TCP Server

Als Server benötigt man einen `TcpListener` um auf einkommende Anfragen zu reagieren. In folgendem Programm wird in der `while (true)`-Schlaufe ein Client nach dem andern bedient. Jeder Client wird meist in einen eigenen Thread ausgelagert.

![](images/ServerClients.png)

```csharp
// listener config (my adress)
IPEndPoint ep = new IPEndPoint(IPAddress.Any, 13);
TcpListener listener = new TcpListener(ep);

// start listening (open port)
listener.Start();

// handle clients
while (true) {
  // Waiting for connection
  TcpClient client = listener.AcceptTcpClient();
  // send Data
  NetworkStream stream = client.GetStream();
  StreamWriter sw = new StreamWriter(stream);
  sw.WriteLine("Hello Client");
  sw.Flush();
  // close connection
  tcpClient.Close();
}
```

Für die Auslagerung in einen Thread wird eine Methode benötigt, welche den Client bedient.

```csharp
// handle clients
while (true) {
  // Waiting for connection
  TcpClient client = listener.AcceptTcpClient();
  // start Thread
  ClHandler clHandler = new ClHandler(client);
  new Thread(clHandler.DoHandle).Start();
}

// class to handle Client
class ClHandler {
  private TcpClient client;

  public ClHandler(TcpClient client) {
    this.client = client
  }

  public void DoHandle () {
    // -- do intensive stuff --
    // send Data
    NetworkStream stream = client.GetStream();
    StreamWriter sw = new StreamWriter(stream);
    sw.WriteLine("Hello Client");
    sw.Flush();
    // close connection
    tcpClient.Close();
  }
}
```
::: callout-important
Es kann sein, dass `StreamReader.ReadLine()` keine Nachricht zurückgibt. Um dies zu unterdrücken, sollte folgende Zeile eingesetzt werden
:::

```csharp
// Back to top of while(true)
if( msg == null ) break;
``` 

### UDP

Bei **UDP** (User Datagram Protocol) ist nicht garantiert, dass Daten lückenlos und in der richtigen Reihenfolge ankommen (bsp. *Online Games*, *Live Streams*, *DNS*, *VPN*). **Verbindungsloses** Protokoll. Daten können Byteweise bidirektional direkt über den `UDP-Client` übertragen werden. **Achtung** Da UDP *Verbindungslos* ist, wird bei einem `.Close()` nur dieses Seite der Verbindung geschlossen, respektive der Socket suspendiert. 

```csharp
// UDP client config
IPAddress ip = IPAddress.Parse("124.0.0.1");
IPEndPoint ep = new IPEndPoint(ip, 12);
UdpClient client = new UdpClient();
client.Connect(ep);

// transmit byte Array
byte[] data = Encoding.ASCII.GetBytes("Hello");
client.Send(data, data.Length);

// close connection
client.Close();
```

#### UDP Server

UDP ist verbindungslos, darum gibt es auf beiden Seiten einen Client. Es muss beidseitig auf den **selben Socket** verbunden werden, damit die "Verbindung" steht. So muss serverseitig ein `UDP-Client` auf den selben `IPEndPoint` verbunden werden, wie dies clientseitig der Fall ist.

```csharp
// "listener" config
IPEndPoint ep = new IPEndPoint(IPAddress.Any, 13);
UdpClient client = new UdpClient(ep);

// start listening, waiting for a UDP packet
byte[] data = client.Receive(ref ep);
string msg = Encoding.ASCII.GetString(data, 
                                 0, data.Length);
// close connection
client.Close();
```

## UART & I2C

Mit dem Packet `System.Device.Gpio` werden die GPIO- und I2C-Schnittstellen zur Verfügung gestellt.
Mit `System.IO.Ports` kann die UART-Schnittstelle hinzugefügt werden.

```csharp
const string uart = "/dev/ttyAMA2";
byte[] data = new byte[512];
SerialPort serial = new SerialPort(uart, 115200);
serial.Open();

if (serial == null || !serial.IsOpen) {
  throw new Exception($"Error opening {uart}");
}
Console.WriteLine($"Port {uart} open");
serial.NewLine = "\r\n";

serial.WriteLine("led red on");

/* [UART Handshake with TinyK22] ============= */
int pinTinyK22Enable = 17;
GpioController ctrl = new GpioController();

// set GPIO to output mode
ctrl.OpenPin(pinTinyK22Enable, PinMode.Output);

// enable UART-Interface on tinyK
ctrl.Write(pinTinyK22Enable, PinValue.High);

while (!Console.KeyAvailable) {
  try {
    int bytes = serial.Read(data, 0, data.Length);
    string read = Encoding.ASCII.GetString(data, 
                                        0, bytes);
    Console.WriteLine(read);
  } catch (Exception ex) {
    Console.WriteLine($"ERROR: {ex.Message}");
  }
}
```
