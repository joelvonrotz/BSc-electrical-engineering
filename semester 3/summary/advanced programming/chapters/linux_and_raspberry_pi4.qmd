## Bash-Commands

Siehe @tbl-bash-commands in @sec-bash-commands.

## Streams

Datenströme oder *Streams* sind eine Grundlegende Eigenschaft der Linux-Kommandozeile. Jedes Programm hat drei Standard *File Deskriptoren* (**FD**) bzw. Datei 'Handles', welche nummeriert vorliegen

![](images/StandardIO_Redirection.png)

* **FD0**: Standard Input *(stdin)*
* **FD1**: Standard Output *(stdout)*
* **FD2**: Standard Error *(stderr)*

![](images/StandardIO_Overview.png)

Diese Handles können in Files umgeleitet werden oder explizit auf der Konsole ausgegeben werden. Folgende Befehle werden hierfür verwendet

* `<`: *stdin*
* `>`: *stdout*
* `2>`: *stderr*

![](images/RedirectedFileHandle.png)

```bash
// output from command to txt
$ ls -la > dirlist.txt

// write to txt
$ echo hello > text.txt

// append to txt
$ echo hello again >> test.txt

// get text from txt
$ grep hello < test.txt

// writes errors to txt
$ ls ? 2> err.txt
```


Spezifisch um *stdout* in *stdin* umzuleiten, wird der **Pipe**(|)-Befehl benutzt.

```bash
$ ifconfig | grep wlan
```

Zudem kann z. B. *stderr* mit `2>&1` in *stdout* umgeleitet werden.

```bash
$ ls ? > combined.txt 2>&1
// or
$ ls ? &> combined.txt
```

![](images/RedirectedERR.png)

## GPIO via Konsole

Bei Linux 'ist alles eine Datei' und damit können Gerätetreiber mit Schreiben und Lesen interagiert werden (wie z.B. Raspi LEDs).

Um die Raspi-LEDs anzusteuern, Superuser: `sudo -s`.

```bash
# set Trigger to none
echo none > /sys/class/leds/led0/trigger
# activate LED
echo 1 > /sys/class/leds/led0/brightness
# deactivate LED
echo 0 > /sys/class/leds/led0/brightness
# reset to old Trigger
echo mmc0 > /sys/class/leds/led0/trigger
# exit Superuser
exit
```

## Berechtigungssystem `ls -la` {#sec-Berechtigung}

Jedem Ordner und jeder Datei ist Berechtigungen zugewiesen, welche beschreibt, wer darf was genau machen. Im Linux-Berechtigungssystem werden **drei** Berechtigungen für **drei** Berechtigungsgruppen und ein Dateityp-Feld angegeben im folgenden Format:

```bash
pi@raspy:~ $ ls -la
-rw-r--r--  1 pi  pi  3523  Jun 27 00:17 .bashrc
-rw-------  1 pi  pi  980   Oct  3 18:24 .bash_history
drwx------  9 pi  pi  4096  Oct  3 05:46 .config
drwxr-xr-x  2 pi  pi  4096  Jun 27 01:23 Downloads
```

- `r`: Lesen (*read*)
- `w`: Schreiben (*write*)
- `x`: Ausführen (*execute*)

Eine Zeile ist wie gefolgt aufgebaut

- Berechtigung (siehe folgende Tabelle für Bedeutung)
- Anzahl Hardlinks
- Name des Besitzers
- Gruppenname
- Grösse
- Datum & Uhrzeit von letzer Änderung
- Dateiname

```{=latex}
\colorbox{NavyBlue!30}{\textbf{\texttt{-}}}\colorbox{ForestGreen!30}{\textbf{\texttt{rw-}}}\colorbox{RedOrange!30}{\textbf{\texttt{r-{}-}}}\colorbox{Purple!30}{\textbf{\texttt{r-{}-}}}\textcolor{lightgray}{\texttt{  1 pi  pi ...}}
```

```{=tex}
\begin{center}
  \begin{tabularx}{\linewidth}{|cX|}
  \hline
  \textbf{Snippet} & \textbf{Bedeutung} \\ \hline
  \colorbox{NavyBlue!30}{\textbf{\texttt{-}}}      & Dateityp (\texttt{-}: Datei, \texttt{d}: Ordner) \\ \hline
  \colorbox{ForestGreen!30}{\textbf{\texttt{rw-}}} & Berechtigung Benutzer \\ \hline
  \colorbox{RedOrange!30}{\textbf{\texttt{r-{}-}}}   & Berechtigung Gruppe \\ \hline
  \colorbox{Purple!30}{\textbf{\texttt{r-{}-}}}      & Berechtigung alle anderen \\ \hline
  \end{tabularx}
\end{center}
```

### Berechtigung ändern `chmod`

Mit `chmod` kann die Berechtigung einer Datei/Ordner geändert werden.

```bash
pi@raspy:~ $ chmod ug+rw myfile.txt
```

Struktur erster Parameter (`ug+rw`)

1. `u`(*user*), `g`(*group*), `o`(*other*) (Kombinationen möglich), `a`(*all*) für alle.
2. `+`: Rechte hinzuzufügen, `-` Rechte entfernen, `=` Berechtigung überschreiben.
3. `r`, `w`, `x` einzeln oder eine Kombination davon

::: {.callout-note}
## Berechtigung Ordner

Die Berechtigungen von Ordner sind ähnlich wie bei Dateien.
Aber `x` gibt an, ob der Ordner via `cd` geöffnet werden darf. 
:::

## Passwort Hashing

## Logfiles & NLog

## Benutzerverwaltung

### Benutzer erstellen

Ein Benutzer wird mit `sudo adduser <name>`{.bash} erstellt.

```bash
sudo adduser peter_enis
```

- Das Home-Verzeichnis `/etc/<name>` wird anhand des Templates in `/etc/skel` erstellt.
- Das Benutzerkonto wird in der Datei `/etc/passwd` erstellt.
- Das Passwort wird [als Hash]{.underline} in `/etc/shadow` gespeichert.

Um zum User zu wechseln, kann `su <name>`{.bash} verwendet werden.

::: {.callout-note}
#### `whoami`

Mit `whoami` wird der aktuelle Nutzer angegeben.
:::

### Benutzer löschen

Um einen Benutzer zu löschen, wird der `deluser` Befehl benötigt.

```bash
deluser peter_enis
```

Dies löscht nur den Benutzer, aber deren Home-Verzeichnis nicht. Dies muss diesbezüglich mit dem zusätzlichen Parameter `--remove-home` gemacht werden.

```bash
deluser peter_enis --remove-home
```

Möchte man alle Dateien löschen, die der User besass, wird der Parameter `--remove-all-files` verwendet.

```bash
deluser peter_enis --remove-all-files
```

### Benutzer einer Gruppe hinzufügen

Um den User einer Gruppe hinzuzufügen, wird `gpasswd` verwendet.

```bash
sudo gpasswd -a peter_enis sudo
```

Um diesen aus einer Gruppe zu entfernen, wird `-d` verwendet.

```bash
gpasswd -d peter_enis sudo
```

## Verschlüsselung

### Symmetrische Verschlüsselung

![](images/SymEncrypt.png "Title: Symmetrische Verschlüsselung")

- Sender und Empfänger verwenden den gleichen Schlüssel
- Sehr schnell *(Ressourcenschonend)* bei hoher Sicherheit
- Algorithmen:
  + AES 128, 192 oder 256 Bit-Schlüssel
  + IDEA *(von ETH)*

### Asymmetrische Verschlüsselung (Public-Private Key)

![](images/AsymEncrypt.png)

- Sender verschlüsselt mit *öffentlichem* Schlüssel
- Empfänger entschlüsselt mit *privatem* Schlüssel
- Rechenintensiver (10'000x), als symmetrische Verfahren
- Algorithmen:
  + RSA 1024, 2048, 4096, ... Bit-Schlüssel
  + Elliptische-Kurven-Verfahren

::: callout-tip
Wegen der benötigten Rechenleistung werden keine grosse Daten über *asymmetrische* Verschlüsselung übertragen. Meist wird über eine *asymmetrische* Verschlüsselung lediglich ein gemeinsamer Schlüssel ausgetauscht um anschliessend eine *symmetrische* Übertragung aufzubauen.
:::

### Digitale Signatur (Public-Private Key)

![](images/DigiSignature.png)

- Sender verschlüsselt Prüfsumme der Nachricht mit dem privaten Schlüssel
- Empfänger verifiziert die Prüfsumme mit dem öffentlichen Schlüssel
- **Nur der Sender kann signieren, alle können die Signatur verifizieren**

## SSH

![](images/SSHTunnel.png)

- Die Kommunikation erfolgt bidirektional via verschlüsseltem Tunnel
- SSH is ein mächtiges Tool:
  + Netzwerkverkehr lässt sich über SSH umleiten
  + Filetransfer (SCP, SFTP)
  + Remote Filesystem (SSHFS)
  + Portforwarding

![](images/SSHConnect.png)

::: callout-important
Der *Public Key* muss auf Korrektheit überprüft werden. Ansonsten besteht die Gefahr einer **man-in-the-middle**-Attacke.
:::

### Schlüssel in Linux generieren

::: callout-tip
Macht man den Public Key auf dem Server bekannt z.B. in einen *authorized Key Storage* auf den Server einträgt. Unter Linux wir der Key im *User*-Verzeichnis gespeichert, so wird die SSH-Verbindung direkt "in den Benutzer" verbunden, so entfällt das Login und der Benutzername.
:::

Zuerst ein Verzeichnis erstellen und den Zugriff auf den eigenen Benutzer einschränken

```bash
pi@raspy:$ mkdir ~/.ssh
pi@raspy:$ chmod 700 ~/.ssh
```

Erstellen einer *Key*-Datei und einschränkung des Zugriffs

```bash
pi@raspy:~/.ssh $ touch authorized_keys
pi@raspy:~/.ssh $ chmod 600 authorized_keys
```

Erstellen eines RSA-Schlüssels mit 4096 Bits. Mit Argument `-m PEM`{.bash} für Benutzung mit Visual Studio *SecureUpload.exe*. Es muss **kein** *passphrase* eingegeben werden

```bash
pi@raspy:~/.ssh $ ssh-keygen -m PEM -b 4069 -t rsa piKey
```

Der *Public Key* wird nun in die Datei *authorized_keys* geschrieben (angehängt)

```bash
pi@raspy:~/.ssh $ cat piKey.pub >> authorized_keys
```

### Windoof Host Konfiguration

*.ssh*-Verzeichnis erstellen und *Private_Key* via `scp`{.bash} (Secure Copy) in das Verzeichnis kopieren

```bash
PC> mkdir "%USERPROFILE%\.ssh"
PC> scp pi@hostname:~/.ssh/piKey "%USERPROFILE%\.ssh"
```

SSH-Konfigurationsdatei namens **config** in *.ssh* Verzeichnis erstellen, folgender Inhalt

```
Host pi-hslu
  #HostName <IP-Adresse oder Hostname>
  HostName <hostname>.simple.eee.intern
  User pi
  Identityfile "C:\Users\<username>\.ssh\piKey"
```

Testen mit 

```bash
PC> ssh pi-hslu
```

### SSH-Tunneling

*Bsp.* aus dem eee-Netz kann nicht in das HSLU-Netz zugegriffen werden. Hierzu wird **SSH-Tunneling** verwendet. Es wird vom Host eine Verbindung auf den Client eröffnet.

```bash
PC> ssh -R 9999:127.0.0.1:9999 pi@<eee-address>
```
Die Option `-R`{.bash} sagt, dass auf der Remote Maschine ein Port *9999* (erste Zahl) geöffnet werden soll, und dass die Pakete zu der IP-Adresse 127.0.0.1 (localhost, auf der PC-Seite) und auf den Port *9999* (hintere Zahl) des PC gesendet werden sollen.

Nun können Daten vom Client auf den Clientport 9999 gesendet werden, welche über SSH auf den Host übertragen werden und auf dem Port 9999 entgegengenommen werden können.

## C# deployment

### Remote-Debugging

Mit `System.Diagnostics.Debugger.IsAttached` kann geprüft werden, ob ein Debugger mit der Ausführung des Programmes verbunden wurde.

1. Programm starten
2. **Debug** > **Attach to Process**
3. **Connection Type** auf *SSH*
4. Connection Target `pi@<eee-adress>` angeben
5. Allenfalls Public Key mitgeben und Passwort
6. In *available processes* `dotnet` auswählen.
7. Attach

## Systemd - *System Daemon*

*Systemd* ist eine Kollektion von Tools und Services und wird insbesondere für Hintergrundprozesse verwendet. Ein *Daemon* bezeichnet ein Program, welches im im Hintergrund läuft und die Kommunikation verläuft über Signale, Pipes oder Sockets (kein direkter Zugriff). Kritik: Systemd übernimmt zu viel Macht und Kontrolle über das System und widerspricht damit traditionellen Unix-Pholosophien wie KISS (Keep It Simple, Stupid) und "Do One Thing and Do It Well". Ebenfalls wird die mangelnde Portabilität kritisiert, da Systemd nicht auf alle nUnix-ähnlichen Betriebssystemen standardmässig vorhanden ist.

Systemd verwendet Unit-Dateien um Prozesse zu beschreiben und diese werden unter `/etc/systemd/system/`, `/etc/systemd/network/` oder `/etc/systemd/user/` abgelegt.

Eine Unit-Datei kann folgendes beinhalten.

```conf
[Unit]
Description=My Hello World from C Sharp Service
After=multi-user.target

[Service]
Type=idle
ExecStart =/usr/local/bin/dotnet ...
  .../home/pi/netcore/HelloWorld/HelloWorld.dll

[Install]
WantedBy=multi-user.target
```

`[Unit]`{.conf} beschreibt Service und Abhängigkeiten. `[Service]`{.conf} beschreibt Service und Befehl für Start & Stop. `[Install]`{.conf} beschreibt wie die Unit *enabled* und *disabled*.

### Befehle

- `systemctl`{.bash} zeigt geladene Units
- `systemctl list-unit-files` zeigt alle Units 
- `sudo systemctl start <service>.service`{.bash}
- `sudo systemctl stop <service>.service`{.bash}
- `sudo systemctl try-restart <service>.service`{.bash}
- `sudo systemctl daemon-reload`{.bash} informiert Daemon über neue Units
- `sudo systemctl enable sample.service`{.bash} Service ist aktiviert und wird beim Booten des Systems automatisch ausgeführt
- `sudo systemctl disable sample.service`{.bash} Service ist deaktiviert und muss manuell gestartet werden
- `journalctl -u sample.service`{.bash} zeigt Protokoll/Journal des Daemons


## UART TinyK <-> Raspi
