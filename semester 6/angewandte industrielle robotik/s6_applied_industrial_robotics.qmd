
![](images/8tic94.jpg)

\newpage


![](images/arob_meme.jpg){width="8cm" fig-align="center"}

::: callout-note
### Rechtssystem

Robotereffektoren, Armteile, etc. werden im kartesischen Koordinatensystem dargestellt anhand des **Rechtssystems**.

![](images/lex-koordinaten-01.png){fig-align="center" width="6cm"}
:::

::: callout-note
### Drehung mit der Rechtenhandregel

Bei der Rotation von Rechtssystemen kann die rechte Handregel angewendet werden. Der Daumen zeigt in die gleiche Richtung der Drehachse (vom Nullpunkt nach aussen) und die rechstlichen Finger zeigen die Drehrichtung an: **Gegenunzeigersinn**!

![](images/Cartesian_coordinate_system_handedness.png){fig-align="center"}
:::



# Repetition Linear Algebra

{{< include repetition_linear_algebra.qmd >}}

\newpage

# Rotationen & Translationen

{{< include rotationen_translationen.qmd >}}

# Quaternion

{{< include quaternion.qmd >}}

# Umwandlungen $Q\leftrightarrow EA \leftrightarrow \prescript{k}{i}{A}$

## Euler zu Quartenion

$A=\psi\qquad B=\theta\qquad C=\phi$

$$
qt=\begin{bmatrix}
\cos(\sfrac{\phi}{2})\cdot\cos(\sfrac{\theta}{2})\cdot\cos(\sfrac{\psi}{2})+\sin(\sfrac{\phi}{2})\cdot\sin(\sfrac{\theta}{2})\cdot\sin(\sfrac{\psi}{2})\\
\sin(\sfrac{\phi}{2})\cdot\cos(\sfrac{\theta}{2})\cdot\cos(\sfrac{\psi}{2})-\cos(\sfrac{\phi}{2})\cdot\sin(\sfrac{\theta}{2})\cdot\sin(\sfrac{\psi}{2})\\
\cos(\sfrac{\phi}{2})\cdot\sin(\sfrac{\theta}{2})\cdot\cos(\sfrac{\psi}{2})+\sin(\sfrac{\phi}{2})\cdot\cos(\sfrac{\theta}{2})\cdot\sin(\sfrac{\psi}{2})\\
\cos(\sfrac{\phi}{2})\cdot\cos(\sfrac{\theta}{2})\cdot\sin(\sfrac{\psi}{2})-\sin(\sfrac{\phi}{2})\cdot\sin(\sfrac{\theta}{2})\cdot\cos(\sfrac{\psi}{2})\end{bmatrix}
$$

## Quartenion zu Euler

$$
\begin{bmatrix}\phi \\ \theta \\ \psi \end{bmatrix}=\begin{bmatrix}
\text{atan2}(2 \cdot(qt_1 \cdot qt_2+qt_3 \cdot qt_4),qt_1^2-qt_2^2-qt_3^2+qt_4^2) \\
\arcsin(2 \cdot (qt_1 \cdot qt_3-qt_2 \cdot qt_4)) \\
\text{atan2}(2 \cdot (qt_1 \cdot qt_4+qt_2 \cdot qt_3),qt_1^2+qt_2^2-qt_3^2-qt_4^2) \\
\end{bmatrix}
$$

## Euler zu Rotationsmatrix

Von Euler Rotation abhängig, folgend mit intrinsisch ZYX:

$$
\begin{split}
&R_{\text{ZYX}}=\prescript{W}{R}{A}=\begin{pmatrix}x_W^{(R)} & y_W^{(R)} & z_W^{(R)}\end{pmatrix}=\underbrace{R_{\mathbf{Z}}(A)}_{\textbf{3.}}\cdot\underbrace{R_{\mathbf{Y}}(B)}_{\textbf{2.}}\cdot\underbrace{R_{\mathbf{X}}(C)}_{\textbf{1.}}\\[2mm]
{} &= \underset{\textstyle\text{Z-Rotation}}{\begin{bmatrix}
  C_A & -S_A & 0 \\
  S_A & C_A & 0 \\
  0 & 0 & 1
\end{bmatrix}}\cdot
\underset{\textstyle\text{Y-Rotation}}{\begin{bmatrix}
   C_B & 0 & S_B \\
   0       & 1 & 0       \\
  -S_B & 0 & C_B
\end{bmatrix}}\cdot
\underset{\textstyle\text{X-Rotation}}{\begin{bmatrix}
  1 &  0      &  0 \\
  0 &  C_C & -S_C \\
  0 &  S_C &  C_C
\end{bmatrix}}\\[2mm]
&=\begin{bmatrix}
{{C_A \cdot C_B}} & -S_A \cdot C_C + C_A \cdot S_B \cdot S_C &  S_A \cdot S_C + C_A \cdot S_B \cdot C_C \\
{{S_A \cdot C_B}} &  C_A \cdot C_C + S_A \cdot S_B \cdot S_C & -C_A \cdot S_C + S_A \cdot S_B \cdot C_C \\
{{-S_B}}      &  {{C_B \cdot S_C}}    &  {{C_B \cdot C_C}}
\end{bmatrix}
\end{split}
$$

## Rotationsmatrix zu Euler

Von Euler Rotation abhängig, folgend mit intrinsisch ZYX:

$$
\begin{split}
&R_{\text{ZYX}}=\prescript{W}{R}{A}=\begin{pmatrix}x_W^{(R)} & y_W^{(R)} & z_W^{(R)}\end{pmatrix}=\underbrace{R_{\mathbf{Z}}(A)}_{\textbf{3.}}\cdot\underbrace{R_{\mathbf{Y}}(B)}_{\textbf{2.}}\cdot\underbrace{R_{\mathbf{X}}(C)}_{\textbf{1.}}\\[2mm]
{} &= \begin{bmatrix}
  C_A & -S_A & 0 \\
  S_A & C_A & 0 \\
  0 & 0 & 1
\end{bmatrix}\cdot
\begin{bmatrix}
   C_B & 0 & S_B \\
   0       & 1 & 0       \\
  -S_B & 0 & C_B
\end{bmatrix}\cdot
\begin{bmatrix}
  1 &  0      &  0 \\
  0 &  C_C & -S_C \\
  0 &  S_C &  C_C
\end{bmatrix}\\[2mm]
&=\begin{bmatrix}
{\color{Orange}\mathbf{C_A \cdot C_B}} & -S_A \cdot C_C + C_A \cdot S_B \cdot S_C &  S_A \cdot S_C + C_A \cdot S_B \cdot C_C \\
{\color{OliveGreen}\mathbf{S_A \cdot C_B}} &  C_A \cdot C_C + S_A \cdot S_B \cdot S_C & -C_A \cdot S_C + S_A \cdot S_B \cdot C_C \\
{\color{BrickRed}\mathbf{-S_B}}      &  {\color{Blue}\mathbf{C_B \cdot S_C}}    &  {\color{Purple}\mathbf{C_B \cdot C_C}}
\end{bmatrix}
\end{split}
$$

$$
\begin{split}
A &= \text{atan2}({\color{OliveGreen}\mathbf{R_{21}}},{\color{Orange}\mathbf{R_{11}}})\\
B &= \arcsin(-{\color{BrickRed}\mathbf{R_{31}}})\\
C &= \text{atan2}({\color{Blue}\mathbf{R_{32}}},{\color{Purple}\mathbf{R_{33}}})
\end{split}
$$

## Quaternion zu Rotationsmatrix

$$
\begin{split}
  {}^W_0A&=\begin{bmatrix}
  {\mathbf{x_W^{(0)}}} &
  {\mathbf{y_W^{(0)}}} &
  {\mathbf{z_W^{(0)}}} =
  \end{bmatrix}\qquad x_W^{(0)}=
  \begin{bmatrix}
    2\cdot(qt_1^2+qt_2^2)-1                \\
    2\cdot(qt_2\cdot qt_3+qt_1\cdot qt_4)  \\
    2\cdot(qt_2\cdot qt_4 - qt_1\cdot qt_3)
  \end{bmatrix}\\[3mm]
  y_W^{(0)}&=\begin{bmatrix}
    2\cdot(qt_2\cdot qt_3-qt_1\cdot qt_4)  \\
    2\cdot(qt_1^2+qt_3^2)-1             \\   
    2\cdot(qt_3\cdot qt_4 + qt_1\cdot qt_2)
  \end{bmatrix}\ z_W^{(0)}=
  \begin{bmatrix}
    2 \cdot(qt_2\cdot qt_4 + qt_1\cdot qt_3)\\
    2\cdot (qt_3\cdot qt_4 - qt_1\cdot qt_2)\\
    2\cdot(qt_1^2+qt_4^2)-1
  \end{bmatrix}
\end{split}
$$

## Rotationsmatrix zu Quaternion

$$
\prescript{k}{i}{A}=\begin{bmatrix}
  A_{11} & A_{12} & A_{13} \\
  A_{21} & A_{22} & A_{23} \\
  A_{31} & A_{32} & A_{33}
\end{bmatrix}
$$

$$
\begin{bmatrix}qt_1 \\ qt_2 \\ qt_3 \\ qt_4\end{bmatrix}=\begin{bmatrix}
  0.5\cdot \sqrt{A_{11}+A_{22}+A_{33}+1} \\
  0.5\cdot\text{sgn}(A_{32}-A_{23})\cdot \sqrt{A_{11}-A_{22}-A_{33}+1}\\
  0.5\cdot\text{sgn}(A_{13}-A_{31})\cdot \sqrt{A_{22}-A_{33}-A_{11}+1}\\
  0.5\cdot\text{sgn}(A_{21}-A_{12})\cdot \sqrt{A_{33}-A_{11}-A_{22}+1}
\end{bmatrix}
$$

::: callout-note
### Vorzeichenfunktion $\text{sgn}(x)$
$$
\text{sgn}(x)=\begin{cases}
+1  & \text{für } x>0\\
0   & \text{für } x=0\\
-1  & \text{für } x<0\\
\end{cases}
$$

:::

# Denavit-Hartenberg-Konvention

Die DH-Konvention beschreibt die Achsen-Zusammenhänge mit vier Parametern (zwei Rotationen und zwei Translationen), welche in folgender Reihenfolge abgearbeitet wird.

1. $\theta_i/^\circ$: Drehung an der $z_i$-Achse
2. $d_i/\text{m}$: Verschiebung Richtung $z_i$-Achse
3. $a_i/\text{m}$: Verschiebung Richtung $x_i$-Achse
4. $\alpha_i/^\circ$: Drehung an der $x_i$-Achse 

## Allgemein

[Jedes]{.underline} Armteil $i(i=0,1,\ldots,n)$ eines Robotes mit $n$ Gelenken wird mit einem Koordinatensystem $K_i$ versehen. $K_i$ ist mit Armteil $i$ fest verbunden.

Die DH Parameter sind so auszulegen, das man $K_i$ in $K_{i+1}$ überführt werden kann.

## Festlegung Weltsystem $K_0$

- $K_0$ ist fest mit ruhender Basis (AT0) verbunden
- **Positon von **$\mathbf{K_0}$ irgendwo auf 1.Gelenkachse $\rightarrow$ möglichst nahe AT1
- $z_0$**-Achse** zeigt entlang 1.Gelenkachse $\rightarrow ~x_0$- & $y_0$-Achse frei wählbar solange **Rechtssystem**

## Festlegung $K_i(i=1,2,\ldots,n-1)$

**Allgemein**: $K_i$ liegt auf Gelenkachse $i+1$

### Position von $K_i$

- $K_i$ liegt im Schnittpunkt von Gelenkachse $i$ & $i+1$

- **oder** verlaufen Gelenkachsen $i$ & $i+1$ parallel, dann $K_i$ irgendwo auf Gelenkachse $i+1$
  - [sinnvoll]{.underline}: zuerst $K_{i+1}$ festlegen, danach $K_i$ so legen, dass Abstand minimal ist.

- **oder** Gelenkachsen $i$ & $i+1$ **nicht** parallel und **nicht** schneidend, dann $K_i$ auf Schnittpunkt der Normalen der Gelenkachsen setzen.

### $z_i$-Achse von $K_i$

- $z_i$-Achse entlang der Gelenkachse $i+1$ $\rightarrow$ 2 Möglichkeiten

### $x_i$-Achse von $K_i$

- Wenn $z_{i-1}$ & $z_i$-Achse schneiden: $x_i$-Achse parallel zum Kreuzprodukt von $z_{i-1}\times z_i$ $\rightarrow$ 2 Möglichkeiten

- Wenn $z_{i-1}$ & $z_i$-Achse **nicht** schneiden: $x_i$-Achse entlang gemeinsame Normalen von Achsen $i$ & $i+1$

- $z_{i-1}$-Achse auf $z_i$-Achse: $x_i$-Achse $=x_{i-1}$-Achse

```{=latex}
\begin{center}
\input{./tikzedt/sometest.tex}
\end{center}
```

## Festlegung $K_n$


### $z_n$-Achse

Die $z_n$-Achse wird in Richtung der $z_{n-1}$-Achsedurch den TCP gelegt.

### $x_n$-Achse

- $z_n$-Achse separat von $z_{n-1}$: $x_n$-Achse zeigt von Gelenkachse $n-1$ zu $n$.
- $z_n$-Achse auf $z_{n-1}$-Achse: $x_n$-Achse zeigt in gleiche Richtung wie $x_{n-1}$-Achse

```{=latex}
\begin{center}
\input{./tikzedt/festlegung_kn.tex}
\end{center}
```

::: callout-tip
### Beispiel

Folgender Roboter wird in DH Parametern beschrieben.

1. Weltsystem $K_0$ bestimmen (z.B. Ende des 1.Gelenkes)
2. 

![](images/s6_applied_industrial_robotics/image.png){fig-align="center"}

\vspace{5mm}

![](images/s6_applied_industrial_robotics/image-1.png){fig-align="center" width="6cm"}

\vspace{5mm}

```{=latex}
\begin{center}
\tdplotsetmaincoords{60}{-75}
\begin{tikzpicture}[tdplot_main_coords]
  \draw[densely dashed, thick] (0,0,0) -- ++(0,0,2) -- ++(0,-2,0) -- ++(0,0,4);
  \node[circle, fill, inner sep=2] at (0,0,0) {};
  \coordsys (0, 0,2) and (0, 0, -90) node[left] {$K_0$};
  \coordsys (0,-2,2) and (0,90, -90) node[left=8,below=-1] {$K_1$};
  \coordsys (0,-2,6) and (0,90, -180) node[left] {$K_2$};
\end{tikzpicture}
\end{center}
```
:::

## Als Homogene Matrix

$$
\begin{split}
{}^{i}_{i-1}{T}&=\begin{bmatrix}
x_i^{(i-1)} & y_i^{(i-1)} & z_i^{(i-1)} & p_{i-1,i}^{(i-1)}\\
    0       &     0       &      0      &         1
\end{bmatrix}\\
&=\begin{bmatrix}
C_{\theta_i}  & -S_{\theta_i}\cdot C_{\alpha_i} &  S_{\theta_i}\cdot S_{\alpha_i} & a_i\cdot C_{\theta_i} \\
S_{\theta_i}  &  C_{\theta_i}\cdot C_{\alpha_i} & -C_{\theta_i}\cdot S_{\alpha_i} & a_i\cdot S_{\theta_i} \\
0             &  S_{\alpha_i}                   &  C_{\alpha_i}                   & d_i                   \\
0 & 0 & 0 & 1
\end{bmatrix}
\end{split}
$$

# Vorwärtstransformation

Sind die Gelenkkoordinaten (Winkel) bekannt, kann die Lage des TCP und Orientierung des Effektors eindeutig beschrieben werden.

$$
T_W(q)={}^n_0T(q)={}^1_0T(q_1)\cdot{}^2_1T(q_2)\cdots{}^{n-1}_{n-2}T(q_{n-1})\cdot{}^{n}_{n-1}T(q_n)
$$

Ist ein Ortsvektor $u_{(i)}$, welcher mit Armteil $i$ verbunden ist und auf Punkt $P$ zeigt, gegeben, kann dieser im Raum berechnet (4.Komponente $=1$):

$$
u^{(0)}_{0P}={}^i_0T(q)\cdot u_{iP}^{(i)}={}^1_0T(q_1)\cdot{}^2_1T(q_2)\cdots{}^{i}_{i-1}T(q_i)\cdot u{(i)}_{iP}
$$

# Rückwärtstransformation

{{< include rueckwarts.qmd >}}

# Software mit Schneebeli

{{< include software_schneebeli.qmd >}}

`\end{multicols*}`{=latex}